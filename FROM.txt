/* rexx */                                                                      
 trace o                                                                        
 /*___________________________________________________________*/                
 "isredit macro (cmd)"   /* no underline in-between parents   */                
                                                                                
 cp = 'IBM-1140'         /* US codepage                       */                
 /* cp = 'IBM-1147' */   /* French codepage                   */                
                                                                                
 /* Convert from codepage to codepage.                        */                
 /* Input:  file on which the edit macro is executed.         */                
 /* Output: Temporary file with converted code                */                
 /*         (may be copied on a permanent file).              */                
 /* Examples: Command ===> TO IBM-1047 FROM IBM-1147          */                
 /*           Command ===> FROM IBM-1147 TO IBM-1047          */                
 /*           Command ===> TO               uses default      */                
 /*           Command ===> TO LIST    list possible codepages */                
 /* There are two EDIT macros: FROM and TO with exactly       */                
 /*           the same code.                                  */                
 /*___________________________________________________________*/                
 /*                                                           */                
                                                                                
 address isredit                                                                
 isr_rc = rc                                                                    
 if isr_rc <> 0 then do /* rexx                               */                
    say 'Error. Must be used as an edit macro'                                  
    exit 12                                                                     
 end /* isr_rc <> 0                                           */                
                                                                                
 "(dsn0) = dataset"                                                             
 "(mbr)  = member"                                                              
 if mbr <> '' then dsn = dsn0'('mbr')'                                          
              else dsn = dsn0 /* sequential                   */                
                                                                                
 /* Build Unix iconv command.                                 */                
                                                                                
 upper cmd                   /* in uppercase                  */                
                                                                                
 /* Remove leading and trailing quotes or apostophes          */                
 /* if both exist simultaneously.                             */                
 cmd = strip(cmd)            /* remove blanks from both sides */                
 if left(cmd,1) = "'" then cmd = strip(cmd,,"'")                                
 if left(cmd,1) = '"' then cmd = strip(cmd,,'"')                                
                                                                                
 call get_rexxname_and_choose_default_codepages                                 
                                                                                
 select /* according to rexxname                              */                
   when rexxname = 'TO' then do                                                 
      parse var cmd to 'FROM' from                                              
      other = 'FROM'                                                            
   end /* when rexxname = 'TO'                                */                
   when rexxname = 'FROM' then do                                               
      parse var cmd from 'TO' to                                                
      other = 'TO'                                                              
   end /* when rexxname = 'FROM'                              */                
   otherwise nop                                                                
 end /* select                                                */                
                                                                                
 /* Assign defaults if necessary.                             */                
 if from = '' then from = from_default                                          
 if to   = '' then to   = to_default                                            
 unix_cmd = 'iconv -f 'from' -t 'to                                             
                                                                                
 /* If request for help:                                      */                
 if (left(cmd,1) = 'H'  )!,     /* e.g. Command ===> TO Help  */                
    (left(cmd,2) = '-H' )!,     /* e.g. Command ===> TO -H    */                
    (left(cmd,4) = 'LIST')!,    /* e.g. Command ===> TO List  */                
    (words(cmd) = 1 & word(cmd,1) = rexxname) then do                           
    say '___________________________________________________'                   
    say                                                                         
    say 'Syntax:'                                                               
    say 'Command ===> 'rexxname' codepage 'other' codepage'                     
    say 'Examples:'                                                             
    say 'Command ===> 'rexxname' IBM-1047'                                      
    say 'Default missing codepage: from 'cp                                     
    say '                          to   z/OS Unix IBM-1047'                     
    say 'Command ===> 'rexxname' 'other' IBM-1147'                              
    say 'Command ===> 'rexxname' help'                                          
    say 'Usual codepages:'                                                      
    say 'IBM-1147 French with Euro sign'                                        
    say 'IBM-1047 z/OS Unix international'                                      
    say 'IBM-1140 USA, COBOL default codepage'                                  
    say 'IBM-1208 UTF-8'                                                        
    say 'IBM-1200 UTF-16BE (Big Endian) National in COBOL'                      
    say 'Possible codepages in the following list.'                             
    say '___________________________________________________'                   
    say                                                                         
    unix_cmd = 'iconv -l' /* list possible codepages          */                
 end /* request for help                                      */                
                                                                                
 /* Signal to UNIX edit macro if it needs to build a large LRECL        */      
 /* STDOUT file.                                                        */      
 wp = wordpos('iconv',unix_cmd)  /* is 'iconv' present in unix_cmd?     */      
 if wp > 0 then do          /* check for non EBCDIC codepage            */      
    tocp = word(unix_cmd,wp + 4) /* obtain to codepage tocp             */      
    /* remove ; from to codepage, if present                            */      
    if right(tocp,1) = ';' then tocp = left(tocp,length(tocp)-1)                
    parse var tocp . '-' tocp /* part at right of dash if present       */      
    /* Cf. https://en.wikipedia.org/wiki/EBCDIC_code_pages              */      
    /*           List of EBCDIC codepages                               */      
    /*           Unix USA  DE   NO   SW   IT   SP   UK   FR   INTL IS   */      
    ebcdic_cp = '1047 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149'        
    if wordpos(tocp,ebcdic_cp) > 0 then ebcdic_output = 'YES'                   
                                   else ebcdic_output = 'NO'                    
 end /* if wordpos('iconv',unix_cmd) > 0                                */      
 /* Signal to UNIX edit macro a large LRECL STDOUT file.                */      
 /* The UNIX edit macro will check if the string "large output"         */      
 /* is present in unix_cmd.                                             */      
 /* Postpend "large output" to unix_cmd.                                */      
 if ebcdic_output = 'NO' then do                                                
    unix_cmd = unix_cmd" large output"                                          
 end /* if ebcdic_output = 'NO'                                         */      
 /* End of signal to UNIX edit macro if it needs to build a large LRECL */      
                                                                                
 /* End of build Unix iconv command.                                    */      
                                                                                
 address ispexec                                                                
 'control errors return'                                                        
                                                                                
 /* Specialized cmd for UNIX macro edit                       */                
 mymacro = 'unix'                                                               
 "view dataset('"dsn"') macro("mymacro")",                                      
       "parm(unix_cmd)"                                                         
                                                                                
 /* ISPEXEC or ISREDIT error:                                 */                
 if ZERRSM   <>'ZERRSM'   then say 'ZERRSM   = 'ZERRSM                          
 if ZERRLM   <>'ZERRLM'   then say 'ZERRLM   = 'ZERRLM                          
 if ZEDMSGNO <>'ZEDMSGNO' then say 'ZEDMSGNO = 'ZEDMSGNO                        
 if ZEDISMSG <>'ZEDISMSG' then say 'ZEDISMSG = 'ZEDISMSG                        
 if ZEDILMSG <>'ZEDILMSG' then say 'ZEDILMSG = 'ZEDILMSG                        
                                                                                
 address    /* resume previous environment                    */                
                                                                                
 'end'                                                                          
 exit                                                                           
 /*___________________________________________________________*/                
 get_rexxname_and_choose_default_codepages:                                     
                                                                                
 /* rexxname is third word in parse source result.            */                
 /* Choose default codepages according to environment         */                
 /* (eighth word in parse source result).                     */                
                                                                                
 parse source var                                                               
 rexxname = word(var,3)                                                         
 if word(var,8) <> 'OMVS' then do /*       not z/OS Unix      */                
    from_default = cp                                                           
    to_default   = 'IBM-1047'     /* default z/OS Unix int'l  */                
 end /* if word(var,8) <> 'OMVS'     not z/OS Unix            */                
 else do                          /*     z/OS Unix            */                
                                                                                
    path_string = translate(rexxname,' ','/')                                   
    rexxname = word(path_string,words(path_string))                             
    p = pos('.',rexxname)    /* remove extension, if present  */                
    if p > 0 then rexxname = substr(rexxname,1,p-1)                             
    upper rexxname                                                              
                                                                                
    to_default   = cp                                                           
    from_default = 'IBM-1047'     /* default z/OS Unix int'l  */                
 end                              /*     z/OS Unix            */                
 return                                                                         
 /*___________________________________________________________*/                
