/* rexx */                                                                      
                                                                                
 /* Display a sorted member list with Command ===> sort cha     */              
 /* The objective is to get as quick as possible                */              
 /* to the most recent work.                                    */              
                                                                                
 default_dsn = userid()".TEST" /* <- Change in your most used dataset */        
 /* for bpxwunix command codepage:                              */              
 lc_all = "Fr_FR.IBM-1147"  /* lc_all = "En_US.IBM-1140"        */              
                                                                                
 /* Command ===> tso dsm           <- using content of variable */              
 /*                                   default_dsn in rexx.      */              
 /*                                   All members are sorted.   */              
 /* Command ===> tso dsm BOZO.CNTL <- All members of BOZO.CNTL  */              
 /* Command ===> tso dsm A%B* <- All members with pattern A%B*  */              
 /* Command ===> tso dsm BOZO.CNTL A%B*                         */              
 /* Command ===> tso dsm A%B* BOZO.CNTL                         */              
                                                                                
 /* Implementation of Pedro's method as described in            */              
 /* http://ibmmainframes.com/about31599.html                    */              
 /* with an inline panel to make the rexx self-contained.       */              
 /* Thank you Pedro.                                            */              
 /* Note: New value of ZCMD is after .ZVARS in )INIT            */              
                                                                                
                                                                                
 trace o                                                                        
 parse arg dsn pattern .                                                        
 /* nparm: number of used parameters                            */              
 nparm = min(2,words(arg(1))) /* 0, 1, 2                        */              
 call check_parameters                                                          
                                                                                
 /* Set parameter member for address ispexec "memlist ..."      */              
 if pattern = '' then mem = ''  /* all members                  */              
                 else mem = 'member('pattern')'                                 
                                                                                
 address ispexec                                                                
   "control errors return"                                                      
   "lminit  dataid(did) dataset('"dsn"') enq(shrw)"                             
            lminit_rc = rc                                                      
            call check_rc lminit_rc,0,'lminit'                                  
   "lmopen  dataid("did")"                                                      
            lmopen_rc = rc                                                      
            call check_rc lmopen_rc,0,'lmopen'                                  
                                                                                
   panel_name = "isrudsm"                                                       
   user_panel = "usrudsm"                                                       
   mycmd      = 'sort cha'             /* issued from usrudsm   */              
   call set_panel                      /* creates panel usrudsm */              
                                                                                
     "control nondispl enter"                                                   
  /* address tso 'ispdptrc'            /* display trace */      */              
     "memlist dataid("did") confirm(yes) panel(usrudsm) "mem                    
  /* address tso 'ispdptrc'                                     */              
              memlist_rc = rc                                                   
              if memlist_rc > 0 then do                                         
                                  call unset_panel                              
                                  call check_rc memlist_rc,0,'memlist'          
                                end /* if memlist_rc > 0        */              
   call unset_panel                                                             
   "lmclose dataid("did")"                                                      
            lmclose_rc = rc                                                     
            call check_rc lmclose_rc,0,'lmclose'                                
   "lmfree  dataid("did")"                                                      
            lmfree_rc = rc                                                      
            call check_rc lmfree_rc,0,'lmfree'                                  
 address /* from ispexec                                        */              
                                                                                
 exit 0                                                                         
                                                                                
 /*_____________________________________________________________*/              
 check_rc:                                                                      
 trace_previous = trace("o") /* no trace                        */              
                                                                                
  /* call example:    call check_rc rc,0,'libdef isptlib'       */              
  /* In case of error:                                                          
  ZEDMSGNO (message identifier), ZEDISMSG (short message text) and ZEDILMSG     
  */                                                                            
  if arg(1)<=arg(2) then do                                                     
     return                                                                     
     trace(trace_previous)                                                      
  end /* if arg(1)<=arg(2)                                      */              
  /* ISPEXEC or ISREDIT error:                                  */              
  if ZERRSM   <> 'ZERRSM'   then say 'ZERRSM   = 'ZERRSM                        
  if ZERRLM   <> 'ZERRLM'   then say 'ZERRLM   = 'ZERRLM                        
  if ZEDMSGNO <> 'ZEDMSGNO' then say 'ZEDMSGNO = 'ZEDMSGNO                      
  if ZEDISMSG <> 'ZEDISMSG' then say 'ZEDISMSG = 'ZEDISMSG                      
  if ZEDILMSG <> 'ZEDILMSG' then say 'ZEDILMSG = 'ZEDILMSG                      
  say 'rc = 'arg(1)                                                             
  if debug='DEBUG' then                                                         
    say 'FUNC='arg(3) 'RC='arg(1) 'ZERRMSG='zerrmsg                             
  zispfrc = 16                                                                  
  address ispexec 'vput zispfrc'                                                
  exit zispfrc                                                                  
                                                                                
 /* __________________________________________________________ */               
 check_parameters: procedure expose default_dsn nparm dsn pattern               
 /* input: default_dsn and nparm (number of parameters: 0, 1, 2) */             
 /* input and output: dsn and pattern                          */               
                                                                                
 dsn = translate(dsn)         /* uppercase                     */               
 dsn = strip(dsn,,"'")        /* remove quotes if any          */               
 pattern = translate(pattern) /* uppercase                     */               
                                                                                
 select /* according to number of parameters nparm             */               
   when nparm = 0 then do /* no parameter                      */               
     dsn = default_dsn                                                          
     mem = '' /* all members                                   */               
   end /* when nparm = 0                                       */               
   when nparm = 1 then do /* one parameter                     */               
     if sysdsn("'"dsn"'") = 'OK' then mem ='' /* all members   */               
     else do /* only parameter dsn is not a valid dataset name */               
        dsn = default_dsn                                                       
        pattern = dsn /* assume only parameter to be a pattern */               
     end /* only parameter is not a valid dataset name         */               
   end /* when nparm = 1                                       */               
   when nparm = 2 then do /* two parameters                    */               
     if sysdsn("'"dsn"'") <> 'OK' then do                                       
        /* first parameter is not a valid dataset name         */               
        temp = pattern; pattern = dsn; dsn = temp /* exchange  */               
        if sysdsn("'"dsn"'") <> 'OK' then do                                    
           say "Two parameters and none of them is a valid dsname."             
           call help                                                            
           exit                                                                 
        end /* two parameters and none of them is a valid dsn  */               
     end /* first parameter is not a valid dataset name        */               
   end /* when nparm = 2                                       */               
   otherwise nop                                                                
 end /* select according to number of parameters               */               
 return                                                                         
                                                                                
 /* ________________________________________________________ */                 
help:                                                                           
  say                                                                           
  say "Rexx DSM                                                   "             
  say "displays member list with the last changed member first.   "             
  say "Examples of call:                                          "             
  say "Command ===> tso dsm           <- All members (default dsn)"             
  say "Command ===> tso dsm BOZO.CNTL <- All members of BOZO.CNTL "             
  say "Command ===> tso dsm A%B* <- All members with pattern A%B* "             
  say "Command ===> tso dsm BOZO.CNTL A%B*                        "             
  say "Command ===> tso dsm A%B* BOZO.CNTL                        "             
  say                                                                           
  return                                                                        
                                                                                
/* ___________________________________________________________ */               
set_panel: procedure expose panel_name user_panel mycmd lc_all,                 
                     ddnm ispptemp                                              
                                                                                
/* lc_all defined at top of rexx.                              */               
/* lc_all = "Fr_FR.IBM-1147" */ /* lc_all = "En_US.IBM-1140"   */               
                                                                                
/* ________________________________________________________ */                  
/* Copy ISRUDSM in ISPPLIB concatenation to temporary       */                  
/* library.                                                 */                  
/* Add three lines after .ZVARS in )INIT and                */                  
/*     one line after )PROC                                 */                  
/*__________________________________________________________*/                  
                                                                                
address tso                                                                     
                                                                                
/* ________________________________________________________ */                  
/* Allocate a temporary panel library and a member.         */                  
/*__________________________________________________________*/                  
                                                                                
call set_up_prefix                                                              
parse source . . rexxname .    /* rexxname in upper case    */                  
ddnm = "dd"random(1,99999)                                                      
ispptemp = prefix"."rexxname"."ispptemp"."ddnm                                  
"alloc file("ddnm") unit(sysda) reuse tracks space(1,1) dir(1)",                
"recfm(f b) lrecl(80) blksize(0) dsn('"ispptemp"("user_panel")')"               
alloc_rc = rc                                                                   
                                                                                
if alloc_rc <> 0 then do                                                        
   say rexxname": allocation of temporary panel library gave code:",            
       alloc_rc                                                                 
   msg_prev = msg('off')                                                        
   "free fi("ddnm")"                                                            
   "del '"ispptemp"'"                                                           
   msg_off  = msg(msg_prev)     /* reset                    */                  
   zispfrc = alloc_rc                                                           
   address ispexec 'vput zispfrc'                                               
   exit zispfrc                                                                 
end /* if alloc_rc <> 0                                     */                  
                                                                                
/* ________________________________________________________ */                  
/* Insert lines ini1, ini2 and ini3 after .ZVARS in )INIT   */                  
/* Insert line proc1 after )PROC                            */                  
/* ________________________________________________________ */                  
                                                                                
call set_env /* z/OS Unix environment variables             */                  
                                                                                
/* awk -v v1="ABC" ' pattern {action} ; pattern {action} '  */                  
                                                                                
regex1 = 'ZVARS = '             /* .ZVARS in )INIT has ZCMD          */         
ini1   = "*rexx(*,mycmd)     "  /* Add after .ZVARS not before       */         
ini2   = " if mycmd <> '' then zcmd = mycmd"                                    
ini3   = "*endrexx           "  /*                                   */         
/* The temporary panel will be cached.                               */         
regex2 = '^)[pP][rR][oO][cC]'   /* ^ at beginning of line            */         
proc1  = "&mycmd = &z        "  /* Add after )PROC                   */         
                                                                                
cmd = 'awk -v ini1="'ini1'"          ', /* define awk variable ini1  */         
      '    -v ini2="'ini2'"          ', /*                           */         
      '    -v ini3="'ini3'"          ', /*                           */         
      '    -v proc1="'proc1'"        ', /*                           */         
      "'                             ", /* start quote               */         
      "             {print}         ;", /* print all lines           */         
      "  /"regex1"/ {print ini1;     ", /* if regex1 matches , add   */         
      "              print ini2;     ", /* after line, ini1, ...     */         
      "              print ini3}    ;", /*                           */         
      "  /"regex2"/ {print proc1}    ", /* if regex2 matches , add   */         
      "'                             ", /* end quote                 */         
      ' < cat "dd:ispplib('panel_name')" '  /* input                 */         
                                                                                
/* cat permits access to a member in a library concatenation.        */         
/* cat "dd:ispplib('panel_name')" > awk ...    failed                */         
/* awk ... < cat "dd:ispplib('panel_name')"    Ok                    */         
                                                                                
drop stderr.; stderr.0 = 0         /* initialize standard error stem */         
/* standard output: "dd:"ddnm                                        */         
call bpxwunix cmd,,"dd:"ddnm,stderr.,env.                                       
bpxwunix_rc = rc                                                                
  if stderr.0 > 0 then do /* stderr.0 was expected                   */         
     say rexxname": Insertion in temporary panel failed."                       
     say "bpxwunix rc = "bpxwunix_rc                                            
     do i = 1 to stderr.0                                                       
        say 'stderr.'i' = 'stderr.i                                             
     end /* do i = 1 to stderr.0                                        */      
     msg_prev = msg('off')                                                      
       "free fi("ddnm")"                                                        
       "del '"ispptemp"'"                                                       
     msg_off  = msg(msg_prev)     /* reset                           */         
     zispfrc = 16                                                               
     address ispexec 'vput zispfrc'                                             
     exit zispfrc                                                               
  end /* if stderr.0 > 0, stderr.0 was expected                      */         
                                                                                
drop stderr. env.                                                               
                                                                                
/* ________________________________________________________ */                  
/* Libdef                                                   */                  
/*__________________________________________________________*/                  
                                                                                
address ispexec  "libdef ispplib library id(",                                  
                 ddnm,                                                          
                 ") stack"                                                      
libdef_rc = rc                                                                  
if libdef_rc > 0 then do                                                        
   say rexxname": libdef ispplib rc = "libdef_rc                                
   zispfrc = libdef_rc                                                          
   address ispexec 'vput zispfrc'                                               
   exit zispfrc                                                                 
end /* if libdef_rc > 0                                     */                  
return                                                                          
                                                                                
/*__________________________________________________________*/                  
                                                                                
unset_panel: procedure expose ddnm ispptemp                                     
                                                                                
address ispexec "libdef ispplib"                                                
msg_prev = msg('off')                                                           
  address tso                                                                   
    "free fi("ddnm")"                                                           
    "del '"ispptemp"'"                                                          
  address /* from tso                                       */                  
msg_off  = msg(msg_prev)     /* reset                       */                  
                                                                                
return                                                                          
                                                                                
/*__________________________________________________________*/                  
/*                                                          */                  
set_env:                                                                        
                                                                                
env.0 = 3                                                                       
env.1 = "PATH=.:/bin:usr/local/bin"                                             
env.2 = "LC_ALL="lc_all                                                         
env.3 = "_BPX_SHAREAS=MUST" /* ddname friendly, e.g. cat DD:DD01 */             
                            /* cat "dd:dd01(mbr)"                */             
                                                                                
return                                                                          
/*__________________________________________________________*/                  
                                                                                
 set_up_prefix:                                                                 
                                                                                
 /* Set up new output file prefix.                                    */        
 prefix = sysvar('syspref')              /* tso profile prefix        */        
 uid    = sysvar('sysuid')               /* tso userid                */        
 if prefix = '' then prefix = uid        /* use uid if null prefix    */        
 if prefix <> '' & prefix <> uid then    /* different prefix than uid */        
    prefix = prefix'.'uid                /* use prefix.uid            */        
                                                                                
 return                                                                         
/*__________________________________________________________*/                  
