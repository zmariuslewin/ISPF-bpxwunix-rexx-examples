/* rexx */                                                                      
trace o                                                                         
/* This rexx is just an example.                            */                  
/* It should be customized.                                 */                  
/* name bg: background                                      */                  
/* Execute in background a rexx.                            */                  
/* May be used for parallel rexx execution.                 */                  
                                                                                
/* rexx is copied to z/OS Unix present working directory.   */                  
/* The copy is executed asynchronously.                     */                  
                                                                                
/* An issue: possible abend SA03 (subtask present)          */                  
/* not always circumvented by adding the z/OS Unix command  */                  
/* wait (wait until all children complete).                 */                  
                                                                                
/* Example:                                                 */                  
/* Synchronous execution of REXX01 (foreground) would be:   */                  
/* Command ===> tso REXX01 parm1 parm2 ...                  */                  
/*                                                          */                  
/* Asynchronous execution of REXX01 (background):           */                  
/* Command ===> tso bg REXX01 parm1 parm2 ...               */                  
/* To preserve lowercase characters in parm1 parm2 ... :    */                  
/* Command ===> cmde                                        */                  
/* Enter TSO commands below:                                */                  
/* ===> bg REXX01 parm1 parm2 ...                           */                  
                                                                                
/* In the following, arg(1) is 'REXX01 parm1 parm2 ...'     */                  
/* Standard output and standard error are added             */                  
/* at the end of REXX01.out in present working directory.   */                  
/* They may be examined later with:                         */                  
/* Command ===> tso oedit                                   */                  
/* and v before REXX01.out                                  */                  
                                                                                
/* To remove REXX01.out:                                    */                  
/* Command ===> tso oedit                                   */                  
/* and d before REXX01.out                                  */                  
/* or                                                       */                  
/* Command ===> tso omvs                                    */                  
/* rm REXX01.out                                            */                  
/* exit                                                     */                  
rexx01 = word(arg(1),1)           /* first word             */                  
rexx01_parm = subword(arg(1),2)   /* rest                   */                  
                                                                                
lc_all = "Fr_FR.IBM-1147"  /* lc_all = "En_US.IBM-1140"     */                  
call set_env /* z/OS Unix environment variables             */                  
                                                                                
/* ________________________________________________________ */                  
/* Allocate rexx library with members to be copied in       */                  
/* present working directory (pwd) then executed.           */                  
/*                                                          */                  
/* pwd may be for instance /u/userid                        */                  
/*                                                          */                  
/* Two members rexx01 and rexx02 will be copied in pwd.     */                  
/* A copy of rexx01 in pwd may call                         */                  
/* a copy of rexx02 in pwd.                                 */                  
/* The copy of rexx01 in pwd will execute in background.    */                  
                                                                                
/* rexx01 is the first word of arg(1).                      */                  
rexx02  = "REXX02"          /* possibly called by rexx01    */                  
rexxlib = 'BOZO.TEST'       /* contains rexx01 and rexx02   */                  
rexxlib =  strip(rexxlib,,"'")  /* remove quotes if any     */                  
"alloc f(dd01) da('"rexxlib"') shr reu"                                         
/* To copy rexx01 in pwd:                                   */                  
/* 'cat "dd:dd01('rexx01')" > 'rexx01                       */                  
/* example: cat "dd:dd01(MBR1)" > MBR1                      */                  
/* The name of the copy in pwd is the member name.          */                  
/* ________ End of allocate rexx library ___________________*/                  
                                                                                
/* ________________________________________________________ */                  
/* Copy rexx in present working directory.                  */                  
/* Synchronous copy (foreground)                            */                  
/*__________________________________________________________*/                  
                                                                                
/* 2>&1 redirect standard error to standard output          */                  
cmd =  'echo "======== background ========" >> 'rexx01'.out 2>&1',              
      ';echo "'arg(1)'"          >> 'rexx01'.out 2>&1',                         
      ';echo "run on $(date -u)" >> 'rexx01'.out 2>&1', /* GMT */               
      ';echo                     >> 'rexx01'.out 2>&1',                         
      ';echo "printenv:"         >> 'rexx01'.out 2>&1',                         
      ';printenv                 >> 'rexx01'.out 2>&1',                         
      ';echo                     >> 'rexx01'.out 2>&1',                         
      ';echo "pwd = $(pwd)"      >> 'rexx01'.out 2>&1',                         
      ';echo                     >> 'rexx01'.out 2>&1',                         
      ';cat "dd:dd01('rexx01')"  >  'rexx01, /* copy to pwd */                  
      ';chmod u+x 'rexx01,    /* make it executable by user */                  
      ';cat "dd:dd01('rexx02')"  >  'rexx02,                                    
      ';chmod u+x 'rexx02     /* no comma at end            */                  
                                                                                
/* pwd is present working directory                         */                  
/* ';cat "dd:dd01('rexx01')"  >  'rexx01      copy in pwd   */                  
/* ';chmod u+x 'rexx01       u: user +: add x: executable   */                  
/* login shell not used: parameter after env. is 0          */                  
call bpxwunix cmd,,,,env.,0                                                     
                                                                                
/* ________________________________________________________ */                  
/* Asynchronous execution of copied rexx (background)       */                  
/*__________________________________________________________*/                  
cmd =  arg(1)'                 >> 'rexx01'.out 2>&1',                           
      ';wait'                                                                   
/* arg(1): executes (copy of rexx01 in pwd) in background.  */                  
/* arg(1) contains name of rexx to call in background       */                  
/* followed by its pararameters: rexx01 parm1 parm2 ...     */                  
/* rexx02 is possibly called by rexx01.                     */                  
                                                                                
/* wait: wait for all children to complete.                 */                  
/* wait was added to avoid a possible abend SA03            */                  
/* (subtask present). An abend SA03 may still occur.        */                  
/* I tried before:                                          */                  
/*  ';echo " ";sleep 5'                                     */                  
/*    echo " ": line added to nohup.out                     */                  
/*          _______________________________                 */                  
/* Execution under /bin/nohup: last parameter is 1          */                  
/* login shell not used: parameter after env. is 0          */                  
/* No stdin stdout stderr allowed for background execution. */                  
/* Output is redirected.                                    */                  
/* Any output from the nohup command is directed            */                  
/* to the file nohup.out.                                   */                  
call bpxwunix cmd,,,,env.,0,1 /* last parameter 1           */                  
                              /* to execute in background   */                  
/* Immediate fall through. rexx01 continues running.        */                  
                                                                                
say                                                                             
say arg(1)                                                                      
say "executing in background."                                                  
say "You may wish to check later with:"                                         
say "Command ===> tso oedit         (check at the end)"                         
say "and v before "rexx01".out"                                                 
say                                                                             
say "nohup.out contains undirected output"                                      
say                                                                             
                                                                                
exit                                                                            
                                                                                
/*__________________________________________________________*/                  
/*                                                          */                  
set_env:                                                                        
                                                                                
env.0 = 3                                                                       
env.1 = "PATH=.:/bin:usr/local/bin"                                             
env.2 = "LC_ALL="lc_all                                                         
env.3 = "_BPX_SHAREAS=MUST" /* ddname friendly, e.g. cat DD:DD01 */             
                            /* cat "dd:dd01(mbr)"                */             
                                                                                
return                                                                          
/*__________________________________________________________*/                  
/* Example of rexx REXX01 and REXX02:                       */                  
/*__________________________________________________________*/                  
/* REXX01:                                                  */                  
/* /* rexx */ /* slash asterisk in column 1 (sheebang)   */ */                  
/* trace r                                                  */                  
/* parse source . . rexxname .                              */                  
/* rexx02 = "REXX02" /* name of called rexx              */ */                  
/*                                                          */                  
/* say "in "rexxname" arg(1) ="arg(1)                       */                  
/* do i = 1 to 2                                            */                  
/*    'sleep 1'   /* z/OS Unix command, sleep 1 second   */ */                  
/*    interpret = "call '"rexx02"' arg(1)"                  */                  
/*    INTERPRET interpret                                   */                  
/* /* call 'REXX02' arg(1)     <-- calling REXX02 in pwd */ */                  
/* /* pwd: present working directory                     */ */                  
/* /* 'sh02'        arg(1)     <-- calling shell sh02    */ */                  
/* end /* do i = 1 to 2  */                                 */                  
/*                                                          */                  
/* /* Clean up                                           */ */                  
/* 'rm 'rexxname            /* remove copy in pwd        */ */                  
/* 'rm 'rexx02                                              */                  
/* exit                                                     */                  
/*__________________________________________________________*/                  
/* REXX02:                                                  */                  
/* /* rexx */                                               */                  
/* trace r                                                  */                  
/* say "in REXX02 arg(1) = "arg(1)                          */                  
/* exit                                                     */                  
/*__________________________________________________________*/                  
