 /* rexx                                                             */         
 /* My name is Julie because of the julian date                      */         
 /* (year yy followed by number ddd of day in the year).             */         
 /*                                                                  */         
 /* Example of julian date:   18321     (day 321 of year 2018)       */         
 /* Example of standard date: 20181117  (november 17, 2018)          */         
 /* I convert from one to the other one.                             */         
 /*                                                                  */         
 /* Input date is julian date yyddd if argument length is odd        */         
 /* (null argument converted to yyddd today's julian date).          */         
 /*                                                                  */         
 /* Input date is standard date yyyymmd if argument length is even.  */         
 /* Verbose if not called.                                           */         
                                                                                
 trace o                                                                        
 parse arg julie .                                                              
 julie_save = julie                                                             
 parm = julie                                                                   
 if julie = '' then julie = date(j)   /* yyddd today's date          */         
 julie_save = julie                                                             
                                                                                
 parse source . . rexxname .                                                    
 if sysvar(sysnest) = 'YES' then called = 'yes'                                 
                            else called = 'no'                                  
                                                                                
 if datatype(julie) <> 'NUM' then do                                            
    call how_to_use                                                             
    exit(20)                                                                    
 end /* if datatype(julie) <> 'NUM'                                  */         
                                                                                
 /* Please note:                                                                
    Input dates given in 2-digit year formats (i.e. European, Julian, Ordered,  
    Usa) are interpreted as being within a 100 year window as calculated by:    
    (current_year - 50) = low end of window                                     
    (current_year + 49) = high end of window                                    
 */                                                                             
                                                                                
 /* Process criterion is argument length.                            */         
 ll = length(julie)                                                             
                                                                                
 /* If ll < 3,                                                       */         
 /* Assume julie is d or dd, number of days of present year,         */         
 /* complete with zeroes at left.                                    */         
 if ll = 1 then julie = '00'julie                                               
 if ll = 2 then julie = '0'julie                                                
 /* update ll                                                        */         
 if ll = 1 ! ll = 2 then ll = 3                                                 
                                                                                
 select /* According to length.                                      */         
 /* If ll = 3 or 5 or 7 convert from julian to standard.             */         
 /* If ll = 4 or 6 or 8 convert from standard to julian.             */         
                                                                                
   /* julian to standard                                             */         
                                                                                
   when ll = 3 then do            /*     ddd                         */         
     parse var julie 1 ddd 4                                                    
     /* Default yy yyyy                                              */         
     yyyy = left(date(s),4)       /* present year from yyyymmdd      */         
     yy   = right(yyyy,2)                                                       
     julie = yy!!ddd              /* adjust julie                    */         
     standard = date(s,julie,j)                                                 
     if called = 'yes' then return standard                                     
     call jtos                                                                  
   end /* when ll = 3 */          /*     ddd                         */         
                                                                                
   when ll = 5 then do            /*   yyddd                         */         
     parse var julie 1 yy  3 ddd 6                                              
     /*  yyyy from 100 years window                                  */         
     yyyy = left(date(s,julie,j),4) /* from j to s: yyyymmdd         */         
     standard = date(s,julie,j)                                                 
     if called = 'yes' then return standard                                     
     call jtos                                                                  
   end /* when ll = 5 */          /*   yyddd                         */         
                                                                                
   when ll = 7 then do            /* yyyyddd                         */         
     parse var julie 1 yyyy 5 ddd 8                                             
     yy = right(yyyy,2)                                                         
     julie = yy!!ddd              /* adjust julie                    */         
     standard = date(s,julie,j)                                                 
     if called = 'yes' then return standard                                     
     call jtos                                                                  
   end /* when ll = 7 */          /* yyyyddd                         */         
                                                                                
   /* standard to julian                                             */         
                                                                                
   when ll = 4 then do            /*     mmdd                        */         
     parse var julie 1 mm 3                                                     
     /* Default yy yyyy                                              */         
     yyyy = left(date(s),4)       /* present year from yyyymmdd      */         
     yy   = right(yyyy,2)                                                       
     julie = yyyy!!julie          /* adjust julie                    */         
     julian = yy!!right(date(d,julie,s),3,'0') /* d: from 1 to 366   */         
     if called = 'yes' then return julian                                       
     call stoj                                                                  
   end /* when ll = 4 */          /*     mmdd                        */         
                                                                                
   when ll = 6 then do            /*   yymmdd                        */         
     parse var julie 1 yy  3 mm 5 dd                                            
     julie = date(s,mm'/'dd'/'yy,u) /* from USA date to standard date */        
     yyyy = left(julie,4)           /* yyyymmdd                      */         
     julian = yy!!right(date(d,julie,s),3,'0')                                  
     if called = 'yes' then return julian                                       
     call stoj                                                                  
   end /* when ll = 6 */          /*   yymmdd                        */         
                                                                                
   when ll = 8 then do            /* yyyymmdd                        */         
     parse var julie 1 yyyy 5 mm 7                                              
     yy = right(yyyy,2)                                                         
     julian = yy!!right(date(d,julie,s),3,'0')                                  
     if called = 'yes' then return julian                                       
     call stoj                                                                  
   end /* when ll = 8 */          /* yyyymmdd                        */         
                                                                                
   otherwise do /* unforeseen case                                   */         
     say 'Invalid input 'julie_save' to 'rexxname'.'                            
     say 'Exit 20.'                                                             
     exit 20                                                                    
   end /* otherwise */ /* unforeseen case                            */         
 end /* select */ /* according to length                             */         
                                                                                
 call cal  /* display calendar                                       */         
 call miscellaneous                                                             
 call how_to_use                                                                
 exit                                                                           
                                                                                
 /*__________________________________________________________________*/         
                                                                                
 jtos:   /* Say result, from julian yyddd to standard yyyymmdd.      */         
                                                                                
 mm = substr(standard,5,2)                                                      
                                                                                
 if parm = '' then       /* no argument                              */         
    say date()" corresponds to today's julian date "date('j')"."                
 else                                                                           
    say 'Julian date 'julie_save' corresponds to 'date(,yy!!ddd,j)' or',        
        standard' (format yyyymmdd).'                                           
 return                                                                         
                                                                                
 /*__________________________________________________________________*/         
                                                                                
 stoj:   /* Say result, from standard yyyymmdd to julian yyddd       */         
                                                                                
 say 'Standard date 'julie_save' corresponds to julian date 'julian,            
     '(format yyddd).'                                                          
 return                                                                         
                                                                                
 /*__________________________________________________________________*/         
                                                                                
 how_to_use:                                                                    
                                                                                
 say copies('_',76); say                                                        
 say 'How to use rexx 'rexxname':'                                              
 say 'Convert from julian date yyddd to standard yyyymmdd or reverse.'          
 say 'Calling modes:'                                                           
 say                                                                            
 say 'Today:'                                                                   
 say 'Command ===> tso 'rexxname                                                
 /*                                                                             
 say 'Command ===> tso viewit 'rexxname' (assuming that viewit outtraps and '   
 say '                 displays what 'rexxname' said)'                          
 */                                                                             
 say                                                                            
 say 'Convert from julian date yyddd to standard date yyyymmdd:'                
 say 'Command ===> tso 'rexxname'           Command ===> tso 'rexxname' 321'    
 say 'Command ===> tso 'rexxname'  18321    Command ===> tso 'rexxname' 2018321'
 say 'Calling from rexx:'                                                       
 say '             yyyymmdd = 'rexxname'()           (today)'                   
 say '             yyyymmdd = 'rexxname'(ddd)               '                   
 say '             yyyymmdd = 'rexxname'(yyddd)             '                   
 say '             yyyymmdd = 'rexxname'(yyyyddd)           '                   
 say                                                                            
 say 'Convert from standard date yyyymmdd to julian date yyddd:'                
 say 'Command ===> tso 'rexxname'  1117     Command ===> tso 'rexxname' 181117' 
 say 'Command ===> tso 'rexxname'  20181117'                                    
 say 'Calling from rexx:'                                                       
 say '             yyddd    = 'rexxname'(mmdd)              '                   
 say '             yyddd    = 'rexxname'(yymmdd)            '                   
 say '             yyddd    = 'rexxname'(yyyymmdd)          '                   
 say                                                                            
 say 'Valid in a 100 years window:'                                             
 say ' (current_year - 50) = low end of window'                                 
 say ' (current_year + 49) = high end of window'                                
 return                                                                         
 /*__________________________________________________________________*/         
                                                                                
 /* Run Unix cal calendar display.                                   */         
 cal: procedure expose mm yyyy                                                  
 say copies('_',76); say                                                        
                                                                                
 /* z/OS Unix commands in IBM-1147 codepage                          */         
 /* Cf. z/OS XL C/C++ Programming Guide >                            */         
 /*     Locales supplied with z/OS XL C/C++ >                        */         
 /*     Compiled locales                                             */         
 env.1 = "LC_ALL=En_US.IBM-1140"                                                
 /* env.1 = "LC_ALL=Fr_FR.IBM-1147" */ /* locale gives LANG=C        */         
 /* env.1 = "LANG=Fr_FR.IBM-1147"    works as well                   */         
 env.0 = 1                                                                      
                                                                                
 /* Second parameter is standard input.                              */         
 /* Third  parameter is standard output.                             */         
 /* call bpxwunix cmd,'DD:IN','DD:OUT',stderr.,env.   works as well  */         
 /* bpxwunix_rc = bpxwunix(cmd,'DD:IN','DD:OUT',stderr.,env.)        */         
 cmd = 'cal  'mm'  'yyyy                                                        
 /* "alloc fi(OUT) da(*) shr reuse"                                  */         
 /* bpxwunix_rc = bpxwunix(cmd,,'DD:OUT',stderr.,env.)               */         
 bpxwunix_rc = bpxwunix(cmd,,out.,stderr.,env.)                                 
 if bpxwunix_rc <> 0 then say "bpxwunix_rc = "bpxwunix_rc                       
                                                                                
 if stderr.0    <> 0 then say "stderr.0    = "stderr.0                          
 /* Display stderr. if non empty.                                    */         
 if stderr.0 <> 0 then    /* z/OS Unix command failed                */         
    do i = 1 to stderr.0                                                        
       say 'stderr.'i' ='stderr.i                                               
    end                                                                         
                                                                                
 do j = 1 to out.0                                                              
    say out.j            /* say for using outtrap                   */          
 end                                                                            
 return                                                                         
                                                                                
 /*__________________________________________________________________*/         
                                                                                
 miscellaneous: procedure                                                       
 say copies('_',76); say                                                        
                                                                                
 string1 = "zsysid, zsysnode, zsysplex, zos390rl, zuser"                        
 string2 = "zdayofwk, zj4date, zdatestd, ztime"                                 
 address ispexec "vget ("string1", "string2")"                                  
 say        "On est le jour "right(zj4date,3)" de l'annee "left(zj4date,4)      
 say        "date du jour        = "zdatestd                                    
 say        "zuser               = "zuser                                       
 say        "heure               = "ztime                                       
 say        "zsysid              = "zsysid                                      
 say        "zsysnode            = "zsysnode                                    
 say        "zsysplex            = "zsysplex                                    
 say        "zos390rl            = "zos390rl                                    
 say        zsysid zsysnode zsysplex zos390rl zuser,                            
            zdayofwk zj4date zdatestd ztime                                     
 return                                                                         
