 /* rexx */                                                                     
 trace o                                                                        
 parse source . . rexxname .    /* rexxname in upper case              */       
 dsnout_prefix = ""        /* please change dataset high level qualifiers */    
                           /* for instance: dsnout_prefix = "XX.YYYY"     */    
                                                                                
 /* Grep search                                                        */       
                                                                                
 /* Example of use:                                                    */       
 /* Command ===> cmde                                                  */       
 /* Enter TSO commands below:                                          */       
 /* ===> sfgrep 'listc a' 'XX.YYYY.USER01.CNTL'                        */       
                                                                                
 if left(word(arg(1),1),1) = "'" /* argument list begins by quote      */       
    then parse value arg(1) with "'" regex "'" dsn .                            
    else parse arg regex dsn .                                                  
 dsn = strip(translate(dsn,'',"'"))                                             
 say 'dsn   = 'dsn                                                              
 say 'regex = 'regex                                                            
                                                                                
 /* z/OS Unix commands in local codepage                               */       
 env.1 = "LANG=En_US.IBM-1140"                                                  
 /* env.1 = "LANG=Fr_FR.IBM-1147" */    /* locale gives LANG=C         */       
 env.0 = 1                                                                      
                                                                                
 call alloc_dsnout                      /* STDOUT allocation           */       
                                                                                
 cmd = 'rm -rf temp;',                  /* remove /$HOME/temp          */       
       'mkdir  temp;',                  /* create /$HOME/temp folder   */       
       'cp "//'!!"'"dsn"'"!!'" temp;',  /* copy lib "//'dsn'" to temp  */       
       'cd     temp;',                  /* in temp                     */       
       "grep -E '"regex"' * ;",         /* search all with regex       */       
       'cd     ..;',                    /* over temp                   */       
       'rm -rf temp'                    /* remove /$HOME/temp          */       
                                                                                
 zispfrc = address_sh(cmd)              /* address_sh('set -x;' cmd)   */       
                                                                                
 call view_dsnout                       /* View BPXWUNIX STDOUT STDERR */       
                                                                                
 signal fin                                                                     
                                                                                
 /*____________________________________________________________________*/       
                                                                                
 fin:   /* normal and abnormal exit                                    */       
 address ispexec "vput zispfrc"                                                 
 exit zispfrc                                                                   
                                                                                
 /*____________________________________________________________________*/       
                                                                                
 address_sh: procedure expose env.                                              
 /* stdin is /dev/null                                                 */       
 newstack                                                                       
                                                                                
 xrc = bpxwunix(arg(1),,STACK,STACK,env.)                                       
                                                                                
 queue copies('_',80)                                                           
 "execio "queued()" diskw stdout (open finis"                                   
 /* execio rc = 1 if truncation occurs e.g. grep expanded statement    */       
                                                                                
 delstack                                                                       
 if xrc <> 0 then say "bpxwunix failed with rc = "xrc                           
 return xrc                                                                     
 /*____________________________________________________________________*/       
 /*                                                                    */       
 alloc_dsnout:                                                                  
 /* Allocate STDOUT dsnout dataset.                                    */       
 /* "alloc fi(stdout) da(*) reu recfm(f b) lrecl(133)"                 */       
 time_stamp = t!!time('s')                                                      
if dsnout_prefix = '' then                                                      
   dsnout = userid()"."rexxname"."time_stamp                                    
else dsnout = dsnout_prefix"."userid()"."rexxname"."time_stamp                  
 allo = "allocate fi(stdout) da('"dsnout"') reuse",                             
 "mod catalog",                                                                 
 "dsorg(ps) space(1 15) tracks recfm(f b) lrecl(133) blksize(0)"                
 allo                           /* execute                             */       
 arc = rc                                                                       
 if arc > 0 then do                                                             
    say "STDOUT dsnout allocate gave code "arc                                  
    zispfrc = 16                                                                
    signal fin                                                                  
 end /* if arc > 0                                                     */       
 return                                                                         
                                                                                
 /*____________________________________________________________________*/       
 /*                                                                    */       
 view_dsnout:                                                                   
                                                                                
 /* Display dsnout                                                     */       
   address ispexec                                                              
    "lminit dataid(dd1) dataset('"dsnout"') enq(shr)"                           
    "view   dataid("dd1")"                                                      
    "lmfree dataid("dd1")"                                                      
   address                                                                      
                                                                                
 /* Clean up                                                           */       
 msgs = msg("off")                                                              
  "delete '"dsnout"'"                                                           
 msgs = msg(msgs)                                                               
                                                                                
 return                                                                         
 /*____________________________________________________________________*/       
