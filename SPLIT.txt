/* rexx */                                                                      
/* Execute split Unix command.                                */                
                                                                                
trace o                                                                         
lang = "En_US.IBM-1140"      /* "Fr_FR.IBM-1147"              */                
                                                                                
/* User is supposed to have an OMVS segment as                */                
/* the rexx uses a temporary subdirectory of the home         */                
/* directory before copying the result to a MVS library.      */                
                                                                                
/* Examples:                                                  */                
/*          VIEW      BOZO.CNTL                               */                
/*  Command ===>                                              */                
/*             Name     Prompt                                */                
/*  split____ MEMBER01 100    <-- split every 100 lines       */                
/*  split____ MEMBER02 -100   <-- split every 100 lines       */                
/*  split____ MEMBER03 -l 100 <-- split every 100 lines       */                
/*  split____ MEMBER04 500 Z  <-- split every 500 lines       */                
/*                     and prefix created members with Z      */                
                                                                                
/*  Created library:                                          */                
/*  BOZO.CNTL.MEMBER01.SPLIT with members                     */                
/*  XAA, XAB, XAC, ... Each one has 100 lines,                */                
/*  if parameter in Prompt field, is 100.                     */                
                                                                                
/*  split____ MEMBER05     default split every 1000 lines     */                
/*  It start a new file every time it has copied              */                
/*  1000 lines.                                               */                
                                                                                
/*  ISPF 3.4                                                  */                
/*           Data Sets Matching BOZO                          */                
/*  Command ===>                                              */                
/*                                                            */                
/*  Command - Enter "/" to select action                      */                
/*  ----------------------------------------------            */                
/*           BOZO.SEQ01                                       */                
/*  split / 100 O.SEQ02                                       */                
/*  Created library:                                          */                
/*  BOZO.SEQ02.SPLIT with members                             */                
/*  XAA, XAB, XAC, ... Each one has 100 lines.                */                
                                                                                
/*  Command ===> tso split 'BOZO.CNTL(MEMBER1)' 100           */                
/*  Command ===> cmde      <-- to preserve lower case         */                
/*  Enter TSO commands below:                                 */                
/*  ===> split 'BOZO.CNTL(MEMBER2)' -l 100 MBR                */                
/*   Created MVS library 'BOZO.CNTL.MEMBER2.SPLIT will        */                
/*   contain membres MBRAA, MBRAB, ...                        */                
/* End of examples.                                           */                
                                                                                
/*  For a library member,                                     */                
/*  the generated library name is suffixed by the             */                
/*  member name and '.SPLIT'.                                 */                
/*  For a sequential data set,                                */                
/*  the generated library name is suffixed by '.SPLIT'.       */                
/*  '.SPLIT' may be truncated from 5 to 2 characters          */                
/*  ('.SPLI' to '.S') in order that the generated library     */                
/*  name fits into 44 characters.                             */                
                                                                                
/*____________________________________________________________*/                
/* Build split z/OS Unix command.                             */                
                                                                                
parse arg dsn rest                                                              
/* In a member list, rest                                     */                
/* may be obtained from prompt field.                         */                
                                                                                
/* Command ===> tso OMVS                                      */                
/* man split    gives:                                        */                
/*         split [-a n] [-l n] [file [prefix]]                */                
/*         split -b n[bkm] [-a n] [file [prefix]]             */                
/*         split [-n] [-a n] file [prefix]                    */                
                                                                                
/* This rexx uses stdin as file and at right of dsname,       */                
/* rest is made of:                                           */                
/*               [-a n] [-l n] [prefix]                       */                
/*               -b n[bkm] [-a n] [prefix]                    */                
/*               [-n] [-a n] [prefix]                         */                
/* prefix, if present, is supposed to be at right.            */                
                                                                                
/* Command ===> tso split dsn 150                             */                
/* gives the Unix command: split -l 150                       */                
/* split every 150 lines, generated member names are          */                
/* XAA, XAB, XAC, ... the default member names and            */                
/* dsn is in stdin.                                           */                
                                                                                
/* Command ===> tso split dsn 150 MBR                         */                
/* gives the Unix command: split -l 150 - MBR                 */                
/* split every 150 lines, generated member names are          */                
/* MBRAA, MBRAB, ... instead of the default member names      */                
/* XAA, XAB, ...     and                                      */                
/* dsn is in stdin (the dash before MBR).                     */                
                                                                                
rest = strip(rest)                                                              
                                                                                
/* If following dsname, there is a number, prefix it by -l    */                
if datatype(word(rest,1)) = 'NUM' then                                          
   rest = '-l 'rest /* Use standard Unix parameter form.      */                
                                                                                
/* If last word of what follows dsname, begins by an          */                
/* alphabetic or national character and                       */                
/* next to last word is not -b,                               */                
/* assume it is prefix.                                       */                
/* It replaces the default 'X' first character of generated   */                
/* member names.                                              */                
w = words(rest)                                                                 
last_word = word(rest,w)                                                        
first_char = left(last_word,1)                                                  
if datatype(first_char,'M') = 1 ! pos(first_char,'@#$') > 0 then do             
   /* 'M' mixed case: a-z or A-Z                              */                
   /* first_char could be the first character of a member name */               
   if w = 1 then rest = ' - 'last_word                                          
   if w > 1 & wordpos(translate(word(rest,w-1)),'-B -') = 0 then                
      rest = subword(rest,1,w-1)' - 'last_word                                  
      /* - indicates input from STDIN                         */                
end /* if datatype(first_char,'M') = 1 ! pos(first_char,'@#$') > 0 */           
                                                                                
cmd = 'split' rest /* Unix command                            */                
say 'Generated z/OS Unix split command for bpxwunix:'                           
say cmd                                                                         
                                                                                
/*____________________________________________________________*/                
/* Allocate STDIN.                                            */                
dsn = strip(dsn,,"'") /* remove quotes if any                 */                
parse var dsn dsn0 '(' member ')' .                                             
"alloc fi(stdin) da('"dsn"') shr reu"                                           
arc = rc                                                                        
if arc > 0 then do                                                              
   say "STDIN allocate gave code "arc                                           
   exit(12)                                                                     
end /* if arc > 0 */                                                            
                                                                                
/*____________________________________________________________*/                
/* Allocate generated library.                                */                
if member <> '' then splitdsn = dsn0'.'member'.SPLIT'                           
                else splitdsn = dsn0'.SPLIT'                                    
if length(splitdsn) > 48 then exit 16                                           
/* truncate leaving at least '.S' at end                      */                
splitdsn = strip(left(splitdsn,44))                                             
msgs = msg("off")                                                               
"delete '"splitdsn"'"                                                           
msgs = msg(msgs)                                                                
"alloc fi(dd01) da('"splitdsn"') like('"dsn0"')",                               
       "dsorg(po) dsntype(library,2) new catalog"                               
arc = rc                                                                        
if arc > 0 then do                                                              
   say splitdsn" allocate gave code "arc                                        
   exit(12)                                                                     
end /* if arc > 0 */                                                            
                                                                                
/*____________________________________________________________*/                
/* Complete z/OS Unix command.                                */                
q  = "'"                     /* quote                         */                
dq = '"'                     /* double quote                  */                
head = dq'//'q               /* head contains "//'            */                
tail = q!!dq                 /* tail contains '"              */                
/* head and tail to surround splitdsn:                        */                
/* cp splitdsn/asterisk "//'splitdsn'"                        */                
/*    Environnement variable _BPX_SHAREAS=MUST                */                
/*    needed with "//'splitdsn'"                              */                
                                                                                
cmd = "set -x           ;",  /* trace                         */                
      "rm -rf "splitdsn";",  /* remove subdirectory           */                
      "mkdir  "splitdsn";",  /* define subdirectory           */                
      "cd     "splitdsn";",  /* subdirectory is pwd           */                
      cmd              ";",  /* split result in subdirectory  */                
      "cd ..            ;",  /* return to parent directory    */                
      'cp 'splitdsn'/* ' head!!splitdsn!!tail ";",                              
      "rm -rf "splitdsn      /* remove subdirectory           */                
                                                                                
      /* 'cp 'splitdsn'/asterisk ' head!!splitdsn!!tail ";",  */                
      /*  copy all subdirectory members to MVS library        */                
                                                                                
/*____________________________________________________________*/                
/* Initialize stem stderr.                                    */                
drop stderr.                                                                    
stderr.0 = 0                                                                    
/*____________________________________________________________*/                
/* Set up env. environment variables stem.                    */                
drop env.                                                                       
env.1 = "LANG="lang                                                             
env.2 = "_BPX_SHAREAS=MUST" /* needed by cp with "//'dsn'"    */                
env.0 = 2                                                                       
                                                                                
/*____________________________________________________________*/                
/* Execute Unix split command.                                */                
/* call bpxwunix cmd,'DD:STDIN',,stderr.,env.                 */                
                                                                                
bpxwunix_rc = bpxwunix(cmd,'DD:STDIN',,stderr.,env.)                            
if bpxwunix_rc = 0 then do                                                      
   say 'File 'dsn' split into 'splitdsn                                         
   /* Edit created MVS library splitdsn.                      */                
   address ispexec                                                              
    "control errors return"                                                     
    "edit dataset('"splitdsn"')"                                                
   address                                                                      
end /* if bpxwunix_rc = 0                                     */                
else do /* bpxwunix_rc <> 0                                   */                
   say 'Splitting file 'dsn' into 'splitdsn                                     
   say 'bpxwunix_rc = 'bpxwunix_rc                                              
   if stderr.0 <> 0 then                                                        
      do i = 1 to stderr.0                                                      
         say 'stderr.'i' ='stderr.i                                             
      end                                                                       
end /* bpxwunix_rc <> 0                                       */                
                                                                                
/*____________________________________________________________*/                
/* Clean up                                                   */                
"free fi(stdin)"                                                                
"free da('"splitdsn"')"                                                         
exit bpxwunix_rc                                                                
/*____________________________________________________________*/                
