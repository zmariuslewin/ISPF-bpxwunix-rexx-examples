  /* rexx */                                                                    
  /*                                                           */               
  /* Timer.                                                    */               
  /* Display every minute a small box with the numbers of      */               
  /* minutes elapsed and remaining. Terminal is locked.        */               
  /*     __ min __                                             */               
  /*    | 1    59 |                                            */               
  /*     ¯¯¯¯¯¯¯¯¯                                             */               
  /* To halt, press Attention key two times then               */               
  /* type 'hi' (halt interpretation waiting up to 3 seconds).  */               
  /*___________________________________________________________*/               
                                                                                
  /*                                                                            
  say                                                                           
  say "Examples of call:                                      "                 
  say "Command ===> tso t          <-- default one hour       "                 
  say "Command ===> tso t 7        <-- seven minutes          "                 
  say                                                                           
  */                                                                            
                                                                                
  /*___________________________________________________________*/               
  trace                                                                         
  signal on halt                                                                
                                                                                
  parse arg min .                                                               
  /* min is the total number of minutes to wait.               */               
  /* Leftmost three digits of min are displayed.               */               
                                                                                
  /* Check argument.                                           */               
  if min = '' then do              /* default                  */               
     min = 60 /* 1 hour default                                */               
  end /* if min = ''                                           */               
                                                                                
  parse source var                                                              
  rexxname = word(var,3)                                                        
  if min = '' & pos('EGG',rexxname) > 0 then min = 7                            
                                                                                
  if datatype(min) <> 'NUM' then do                                             
     call help                                                                  
     exit                                                                       
  end /* if datatype(min) <> 'NUM'                             */               
                                                                                
  /*___________________________________________________________*/               
                                                                                
  address ispexec                                                               
                                                                                
  call set_panel                                                                
                                                                                
  /*                                                                            
  x = time('E')                 /* Start elapsed time counter  */               
  */                                                                            
                                                                                
  /* Show timer panel updated each minute.                     */               
  do i = 0 to min-1                                                             
     zedsmsg = left(i,3)!!right(min-i,4)                                        
     "setmsg msg(isrz000)"                                                      
     call display_panel                                                         
                                                                                
     /* Sleep 60 seconds.                                      */               
     /* Check with time('E') at start and end.                 */               
     do n = 1 to 20                                                             
        /* Wait at maximum 3 second if halted with             */               
        /* ATTN + AATN + 'hi'                                  */               
        address syscall 'sleep 3' /* sleep 3: 3 seconds        */               
     end /* do n = 1 to 20                                     */               
                                                                                
  end /* do i = 0 to min-1                                     */               
                                                                                
  /* Alarm 3 times at end                                      */               
  do k = 1 to 3                                                                 
     zedsmsg = left(i,3)!!right(min-i,4)                                        
     "setmsg msg(isrz001)"      /* alarm set                   */               
     call display_panel                                                         
     address syscall 'sleep  1' /* sleep 1: 1 second           */               
  end /* do k = 1 to 3                                         */               
                                                                                
halt: /* or normal exit                                        */               
                                                                                
  /*                                                                            
  elapsed = time('E')                                                           
  say 'Temps elapsed : ' left(elapsed,pos('.',elapsed)-1) 'seconds.'            
  */                                                                            
                                                                                
  address                                                                       
  call unset_panel                                                              
                                                                                
  exit                                                                          
/* ___________________________________________________________ */               
                                                                                
help:                                                                           
  say                                                                           
  say "Examples of call:                                      "                 
  say "Command ===> tso t       <-- default one hour          "                 
  say "Command ===> tso t 7     <-- seven minutes             "                 
  say "To halt, press Attention key two times then type HI.   "                 
  say                                                                           
  return                                                                        
                                                                                
  /*___________________________________________________________*/               
                                                                                
display_panel:                                                                  
                                                                                
  "control display lock"                                                        
  "addpop row(1) column(49)"                                                    
  zwinttl = "min"   /* name popup windows                      */               
  "display panel("panel_name")"                                                 
  "rempop"                                                                      
                                                                                
  return                                                                        
/* ___________________________________________________________ */               
set_panel: procedure expose panel_name ddnm ispptemp                            
                                                                                
panel_name = "pnpop"                                                            
/* Panel starts                                                                 
)BODY WINDOW(8,1)                                                               
                                                                                
)END                                                                            
   Panel ends */                                                                
                                                                                
address tso                                                                     
/* ________________________________________________________ */                  
/* Allocate a temporary panel library and a member.         */                  
/*__________________________________________________________*/                  
                                                                                
call set_up_prefix                                                              
parse source var                                                                
rexxname = word(var,3)                                                          
ddnm = "dd"random(1,99999)                                                      
ispptemp = prefix"."rexxname"."ispptemp"."ddnm                                  
"alloc file("ddnm") unit(sysda) reuse tracks space(1,1) dir(1)",                
"recfm(f b) lrecl(80) blksize(0) dsn('"ispptemp"("panel_name")')"               
alloc_rc = rc                                                                   
                                                                                
if alloc_rc <> 0 then do                                                        
   say rexxnam": allocation of temporary panel library gave code:",             
       alloc_rc                                                                 
   msg_prev = msg('off')                                                        
   "free fi("ddnm")"                                                            
   msg_off  = msg(msg_prev)     /* reset                    */                  
   zispfrc = alloc_rc                                                           
   address ispexec 'vput zispfrc'                                               
   exit zispfrc                                                                 
end /* if alloc_rc <> 0                                     */                  
                                                                                
/* ________________________________________________________ */                  
/* Copy panel from rexx source using Unix sed command.      */                  
/*__________________________________________________________*/                  
                                                                                
/* for bpxwunix command codepage                            */                  
lc_all = "Fr_FR.IBM-1147"  /* lc_all = "En_US.IBM-1140"     */                  
                                                                                
call set_env /* z/OS Unix environment variables             */                  
                                                                                
/* ________________________________________________________ */                  
/* sed input file will be rexx source in stem srcline.      */                  
/*__________________________________________________________*/                  
                                                                                
drop srcline.                                                                   
do i = 1 to sourceline(); srcline.i = sourceline(i); end                        
srcline.0 = sourceline()                                                        
                                                                                
/* ________________________________________________________ */                  
/* Extract member panel from rexx source.                   */                  
/*__________________________________________________________*/                  
                                                                                
regex1 = '^)BODY'          /* ^ at beginning of line        */                  
regex2 = '^)END'                                                                
                                                                                
/* Print from line with regex1 included to                  */                  
/* line with regex2 included,                               */                  
/* reading all input file.                                  */                  
/* -n do not print                                          */                  
/*  p        print                                          */                  
cmd1 = "sed -n '/"regex1"/,/"regex2"/p' "                                       
                                                                                
/* Print until line with regex2 included,                   */                  
/* quit after line with regex2 is printed.                  */                  
/*  q        quit                                           */                  
cmd2 = "sed    '/"regex2"/q' "                                                  
                                                                                
cmd  = "sed -n '/"regex1"/,/"regex2"/p;/"regex2"/q' "                           
                                                                                
call bpxwunix cmd,srcline.,"dd:"ddnm,stderr.,env.                               
call print_stderr /* check for errors                       */                  
                                                                                
drop srcline. stderr.                                                           
                                                                                
/* ________________________________________________________ */                  
/* Libdef                                                   */                  
/*__________________________________________________________*/                  
                                                                                
address ispexec  "libdef ispplib library id(",                                  
                 ddnm,                                                          
                 ") stack"                                                      
libdef_rc = rc                                                                  
if libdef_rc > 0 then do                                                        
   say rexxname": libdef ispplib rc = "libdef_rc                                
   zispfrc = libdef_rc                                                          
   address ispexec 'vput zispfrc'                                               
   exit zispfrc                                                                 
end /* if libdef_rc > 0                                     */                  
return                                                                          
                                                                                
/*__________________________________________________________*/                  
                                                                                
unset_panel: procedure expose ddnm ispptemp                                     
                                                                                
address ispexec "libdef ispplib"                                                
msg_prev = msg('off')                                                           
  "free fi("ddnm")"                                                             
  "del '"ispptemp"'"                                                            
msg_off  = msg(msg_prev)     /* reset                       */                  
                                                                                
return                                                                          
                                                                                
/*__________________________________________________________*/                  
/*                                                          */                  
set_env:                                                                        
                                                                                
env.0 = 3                                                                       
env.1 = "PATH=.:/bin:usr/local/bin"                                             
env.2 = "LC_ALL="lc_all                                                         
env.3 = "_BPX_SHAREAS=MUST" /* ddname friendly, e.g. cat DD:DD01 */             
                            /* cat "dd:dd01(mbr)"                */             
                                                                                
return                                                                          
/*__________________________________________________________*/                  
/*                                                          */                  
print_stderr: procedure expose stderr.                                          
                                                                                
if datatype(stderr.0) = 'NUM' then do                                           
   if stderr.0 > 0 then do                                                      
      queue                                                                     
      do i = 1 to stderr.0                                                      
         queue 'stderr.'i' = 'stderr.i                                          
      end /* do i = 1 to stderr.0                           */                  
   end /* if stderr.0 > 0                                   */                  
end /* if datatype(stderr.0) = 'NUM                         */                  
                                                                                
return                                                                          
/*__________________________________________________________*/                  
                                                                                
 set_up_prefix:                                                                 
                                                                                
 /* Set up new output file prefix.                                    */        
 prefix = sysvar('syspref')              /* tso profile prefix        */        
 uid    = sysvar('sysuid')               /* tso userid                */        
 if prefix = '' then prefix = uid        /* use uid if null prefix    */        
 if prefix <> '' & prefix <> uid then    /* different prefix than uid */        
    prefix = prefix'.'uid                /* use prefix.uid            */        
                                                                                
 return                                                                         
/*__________________________________________________________*/                  
