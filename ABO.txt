/* rexx */                                                                      
trace o                                                                         
                                                                                
parse arg command                                                               
command = strip(command)                                                        
call visualize    /* Outtrap what has been said or traced                     */
                  /* and visualize in a file.                                 */
                                                                                
/* When command parameter is empty then                                       */
/*    get ARCH architecure level                                              */
/*    and issue IEOPZ commands                                                */
/* When command parameter contains 'TSO' then                                 */
/*    remove 'TSO' and execute command with output visualization.             */
/* Otherwise                                                                  */
/*    general MVS and JES2 command processor with output visualization.       */
/*                                                                            */
                                                                                
/* Example of use:                                                            */
/* Command ===> tso abo                                                       */
/* Command ===> tso abo d a       <-- MVS  command D A                        */
/* Command ===> tso abo $di       <-- JES2 command $DI                        */
/* Command ===> tso abo tso time                                              */
/* Command ===> cmde                                                          */
/* Enter TSO commands below:                                                  */
/* ===> abo tso rex01 Azerty Qwerty                                           */
                                                                                
/*                                                                              
Information on ARCH obtained from :                                             
Google search on the following string between quotes:                           
  "ARCH settings and hardware models"                                           
Enterprise COBOL for z/OS, V6.3 Performance Tuning Guide,                       
  "ARCH settings and hardware models" table                                     
Also Enterprise COBOL for z/OS, V6.3 Programming Guide,                         
  ARCH compilation option                                                       
*/                                                                              
                                                                                
/*                                                                              
Hardware Models (as of 2019):                                                   
ARCH(7)  2094-xxx models (IBM System z9 EC)                                     
         2096-xxx models (IBM System z9 BC)                                     
ARCH(8)  2097-xxx models (IBM System z10 EC)                                    
         2098-xxx models (IBM System z10 BC)                                    
ARCH(9)  2817-xxx models (IBM zEnterprise z196 EC)                              
         2818-xxx models (IBM zEnterprise z114 BC)                              
ARCH(10) 2827-xxx models (IBM zEnterprise EC12)                                 
         2828-xxx models (IBM zEnterprise BC12)                                 
ARCH(11) 2964-xxx models (IBM z13)                                              
         2965-xxx models (IBM z13s)                                             
ARCH(12) 3906-xxx models (IBM z14)                                              
         3907-xxx (IBM z14 ZR1) models                                          
*/                                                                              
                                                                                
/*____________________________________________________________________________*/
/*                     TABLE TO UPDATE (kindly modify)                        */
                                                                                
table = '2094 ARCH(7)     2096 ARCH(7)',         /* COBOL V6.2 default        */
        '2097 ARCH(8)     2098 ARCH(8)',                                        
        '2817 ARCH(9)     2818 ARCH(9)',                                        
        '2827 ARCH(10)    2828 ARCH(10)',                                       
        '2964 ARCH(11)    2965 ARCH(11)',        /* Z13                       */
        '3906 ARCH(12)    3907 ARCH(12)',        /* Z14                       */
        '8561 ARCH(13)    8562 ARCH(13)',        /* Z15                       */
        '9996 DUMMY       9997 DUMMY   ',        /* spare1                    */
        '9998 DUMMY       9999 DUMMY   '         /* spare2                    */
/*____________________________________________________________________________*/
                                                                                
say 'Information about ABO or general command processor.'                       
say 'To exit: PF3. To copy, you may use CUT and PASTE.'                         
say                                                                             
say "Examples of call:                                       "                  
say "Information about ABO (Automatic Binary Optimizer):     "                  
say "Command ===> tso abo                                    "                  
say "General command processor:                              "                  
say "Command ===> tso abo d iefopz,ddname=dfhrpl             "                  
say "Command ===> tso abo d a       <-- MVS  command D A     "                  
say "Command ===> tso abo $di       <-- JES2 command $DI     "                  
say "TSO command processor:                                  "                  
say "Command ===> tso abo tso time                           "                  
say "Command ===> cmde                                       "                  
say "Enter TSO commands below:                               "                  
say "===> abo tso rexx01 Azerty Qwerty                       "                  
say                                                                             
                                                                                
if command <> '' then do                                                        
  call execute_MVS_command(command)                                             
  exit                                                                          
end /* if command <> ''                                                       */
                                                                                
/* Display information if command = ''                                        */
say copies('_',85)                                                              
say                                                                             
                                                                                
/* Issue z/OS command: D M=CPU                                                */
/* to obtain model then architecture level.                                   */
                                                                                
/* Alternative with:                                                          */
/* if syscpus('cpus.') = 0 then                                               */
/*    model = right(word(cpus.1,words(cpus.1)),4)                             */
/*    model made of four rightmost characters of last word of cpus.1          */
                                                                                
cmd = 'd m=cpu'                                                                 
call execute_MVS_command(cmd)                                                   
say res                                                                         
                                                                                
/* Try to get COBOL default ARCH option if COBOL compiler in linklist.        */
/*                                                                            */
call try_to_get_COBOL_ARCH_default                                              
                                                                                
/* IEFOPZ commands:                                                           */
                                                                                
/* Display status and get IEFOPZ member suffix_list                           */
cmd = 'd iefopz,status'                                                         
call execute_MVS_command(cmd)                                                   
                                                                                
if suffix_list <> '' then do                                                    
                                                                                
  /* Get parmlib_dsn_list                                                     */
  cmd = 'd parmlib'                                                             
  call execute_MVS_command(cmd)                                                 
                                                                                
  /* List PARMLIB members corresponding to suffix_list.                       */
  call list_parmlib_members                                                     
                                                                                
end /* if suffix_list <> ''                                                   */
                                                                                
/* List new datasets which will be concatenated ahead of old datasets.        */
cmd = 'd iefopz,old=*'                                                          
call execute_MVS_command(cmd)                                                   
                                                                                
/* IEFOPZ help (from z/OS V2R3 MVS System Commands):                          */
call show_syntax                                                                
                                                                                
exit                                                                            
/*________________________ROUTINES FOLLOW ____________________________________*/
                                                                                
execute_MVS_command:                                                            
parse arg cmd                                                                   
                                                                                
drop c.                                                                         
c.0 = 1                                                                         
c.1 = left(cmd,80)                                                              
                                                                                
/* Execute command.                                                           */
/* Result in isfulog. stem                                                    */
                                                                                
rc = isfcalls("on")                    /* access = on                         */
isfcons = "sdsf"random()               /* console = sdsfxxx                   */
isfdelay = 1 /* Wait 1 second before retrieving results                       */
address sdsf isfslash "("c.") (wait)"                                           
isfslash_rc = rc                       /* save return code                    */
rc = isfcalls("off")                   /* access = off                        */
                                                                                
/* If ok, display result.                                                     */
                                                                                
if isfslash_rc = 0 then do                                                      
   select /* format result according to command                               */
                                                                                
   when translate(cmd) = 'D M=CPU' then do                                      
                                                                                
     say   'This model architecture level:'                                     
     res = 'Unknown architecture level.', /* initialize res (result)          */
           'Consider updating table in rexx.'                                   
     do i = 1 to isfulog.0                                                      
                                                                                
        p = pos('CPC SI',isfulog.i) /* result of STSI command                 */
        if p >  0 then do /* table search with wordpos                        */
           parse var isfulog.i . '=' model '.' . /* extract model number      */
           q = wordpos(strip(model,'L','0'),table)                              
           if q > 0 then /* model found in table, ARCH is next word           */
                    res = word(table,q+1) /* architecture level e.g. ARCH(12) */
           leave         /* exit loop                                         */
        end /* if p > 0       line contains 'CPC SI'                          */
                                                                                
     end /* do i = 1 to isfulog.0                                             */
                                                                                
   end /* when cmd = 'D M=CPU'                                                */
                                                                                
   when translate(cmd) = 'D IEFOPZ,STATUS' then do                              
                                                                                
     suffix_list = '' /* initialize                                           */
     say copies('_',85)                                                         
     say                                                                        
     say 'Execution of MVS command'                                             
     say cmd                                                                    
     say 'gave:'                                                                
     say                                                                        
     do i = 2 to isfulog.0                                                      
        say isfulog.i                                                           
        p = pos('IEFOPZ(s)',isfulog.i) /* line with IEFOPZ member suffixes    */
        if p >  0 then do /* members IEFOPZxx exist                           */
           suffix_list = translate(subword(isfulog.i,2),' ',',')                
        end /* if p > 0      members IEFOPZxx exist                           */
     end /* do i = 1 to isfulog.0                                             */
                                                                                
   end /* when cmd = 'D IEFOPZ,STATUS'                                        */
                                                                                
   when translate(cmd) = 'D PARMLIB' then do                                    
   /* get parmlib_dsn_list                                                    */
     parmlib_dsn_list = ''             /* initialize                          */
     do k = 1 to isfulog.0                                                      
        p = pos('VOLUME  DATA SET',isfulog.k)                                   
        if p =  0 then iterate         /* line not yet reached                */
        do m = k + 1 to isfulog.0      /* lines after 'VOLUME  DATA SET'      */
           parmlib_dsn_list = parmlib_dsn_list word(isfulog.m,4) /* 4th word  */
        end /* do m = k + 1 to isfulog.0                                      */
        leave                                                                   
                                                                                
     end /* do k = 1 to isfulog.0                                             */
     parmlib_dsn_list = strip(parmlib_dsn_list ) /* remove left blank         */
                                                                                
   end /* when cmd = 'D PARMLIB'                                              */
                                                                                
   otherwise do /* general                                                    */
     say copies('_',85)                                                         
     say                                                                        
     say 'Execution of MVS command'                                             
     say cmd                                                                    
     say 'gave:'                                                                
     say                                                                        
     do i = 2 to isfulog.0                                                      
        say isfulog.i                                                           
     end /* do i = 1 to isfulog.0                                             */
   end   /* otherwise     general case                                        */
                                                                                
   end /* select    format result according to command                        */
end /* if isfslash_rc = 0                                                     */
                                                                                
return                                                                          
/*____________________________________________________________________________*/
                                                                                
list_parmlib_members:                                                           
                                                                                
say copies('_',85)                                                              
say                                                                             
say 'List of PARMLIB member(s):'                                                
say                                                                             
do n = 1 to words(suffix_list)                                                  
   suffix = word(suffix_list,n)                                                 
   member = iefopz!!suffix                                                      
   do d = 1 to words(parmlib_dsn_list)                                          
      dsn = word(parmlib_dsn_list,d)                                            
      dsn_member = dsn"("member")"                                              
      if sysdsn("'"dsn_member"'") = 'OK' then do                                
         call display_dsn_member                                                
         leave d                                                                
      end /* if sysdsn("'"dsn_member"'") = 'OK'                               */
   end /* do d = 1 to words(parmlib_dsn_list)                                 */
end /* do n = 1 to words(suffix_list)                                         */
                                                                                
return                                                                          
/*____________________________________________________________________________*/
display_dsn_member: procedure expose dsn_member                                 
                                                                                
say                                                                             
say dsn_member                                                                  
"alloc fi(in) da('"dsn_member"') shr reuse"                                     
mrc = rc                                                                        
if mrc > 0 then do                                                              
   say dsn_member "allocate gave code "mrc                                      
   exit(12)                                                                     
end /* if mrc > 0                                                             */
address mvs "execio * diskr in (stem in. fini"                                  
"free fi(in)"                                                                   
do i = 1 to in.0; say in.i; end                                                 
                                                                                
return                                                                          
/*___________________________________________________________________________*/ 
                                                                                
try_to_get_COBOL_ARCH_default:                                                  
                                                                                
/* Empty COBOL program compilation                                            */
/* to get COBOL default ARCH architecture level if compiler is in linklist.   */
/* ARCH is in SYSPRINT.                                                       */
                                                                                
address tso                                                                     
                                                                                
/* sysin  Empty COBOL program, compilation gives rc = 16                      */
'alloc fi(sysin) dummy reuse'                                                   
                                                                                
/* COBOL sysprint                                                             */
'alloc fi(sysprint) unit(vio) tr sp(1) reuse'                                   
arc = rc                                                                        
if arc > 0 then do                                                              
   say "cobol sysprint allocate gave code "arc                                  
   exit(12)                                                                     
end /* if arc > 0 */                                                            
/*                                                                            */
                                                                                
/* syslin                                                                     */
'alloc fi(syslin) dummy reuse'                                                  
                                                                                
/* sysut1 to sysut15                                                          */
do i = 1 to 15                                                                  
  "alloc fi(sysut"i") unit(vio) tr sp(1) reuse"                                 
  brc = rc                                                                      
  if brc > 0 then do                                                            
     say "cobol sysut"i" allocate gave code "brc                                
     exit(12)                                                                   
  end /* if brc > 0 */                                                          
end /* do i = 1 to 15                                                         */
                                                                                
/* sysmdeck                                                                   */
'alloc fi(sysmdeck) dummy reuse'                                                
                                                                                
/* Execute interactively the COBOL compiler.                                  */
' call *(igycrctl)'              /*   if in linklist                          */
                                                                                
cmd = 'grep ARCH'       /* e.g. ARCH(12) for z14, ARCH(13) for z15            */
call bpxwunix cmd,'DD:SYSPRINT',out.                                            
if datatype(out.0) = 'NUM' then do                                              
   if out.0 > 0 then do                                                         
      say                                                                       
      say 'COBOL default ARCH option is 'word(out.1,words(out.1))               
      /* COBOL defaults in *(igycdopt)                                        */
   end /* if out.0 > 0                                                        */
end /* if datatype(out.0) = 'NUM                                              */
                                                                                
/* clean up                                                                   */
"free fi(sysprint syslin sysin sysmdeck)"                                       
do i = 1 to 15                                                                  
  "free fi(sysut"i")"                                                           
end /* do i = 1 to 15                                                         */
                                                                                
address                                                                         
return                                                                          
/*____________________________________________________________________________*/
show_syntax:                                                                    
                                                                                
say copies('_',85)                                                              
say                                                                             
say 'Syntax of DISPLAY and SET IEFOPZ:'                                         
say                                                                             
say '   D IEFOPZ                                                            '   
say '   {,DDNAME=ddname[,JOBNAME=jobname]}                                  '   
say '   {,JOBNAME=jobname}                                                  '   
say '   {,NEW=newds[,OWNER=owner][,STATE={ACTIVE|ALL}]}                     '   
say '   {,OLD=oldds[,ARCH={MAXARCH|nn|ALL}][,MEMBERS=members][,OWNER=owner] '   
say '   [,STATE={ACTIVE|ALL}]}                                              '   
say '   {,OWNER=owner}                                                      '   
say '   {,STATUS}                                                           '   
say '   [,L={a|name|name-a}]                                                '   
say                                                                             
say '   {SET | T} [IEFOPZ= {(xx,...,xx [,C])|REFRESH}]                      '   
say '                                    C: syntax check only               '   
                                                                                
return                                                                          
                                                                                
/*____________________________________________________________________________*/
                                                                                
 visualize: procedure expose command                                            
 address tso                                                                    
 parse source . . rexxname .                                                    
 if sysvar('sysnest') = 'NO' then do /* not invoked                           */
    /* invoke to visualize in a file what has been said or traced             */
    stem_name = outtrap('line.') /* stem to get display output                */
      p = wordpos('TSO',translate(command))                                     
      select                                                                    
        when p > 0 then delword(command,p,1)                                    
        /* remove tso string then execute                                     */
        otherwise       rexxname command   /* only one recursion level        */
      end                                                                       
    outtrap_off = outtrap('off')                                                
 end /* if sysvar('sysnest') = 'NO'     not invoked                           */
 else return /* execute (nested)                                              */
                                                                                
 /* Visualize.                                                                */
 if line.0 > 0 then do                                                          
    if sysvar(sysispf) <> 'ACTIVE' then do                                      
       do i = 1 to line.0                                                       
          say line.i                                                            
       end /* do i = 1 to line.0                                              */
       zispfrc = 0                                                              
       exit zispfrc                                                             
    end /* if sysvar(sysispf) <> 'ACTIVE'                                     */
    else do /*       ispf ACTIVE                                              */
                                                                                
       /* Allocate visualization file.                                        */
       address tso                                                              
       ddnm = 'dd'right(random(1,99999),5,'0') /* choose random ddname        */
       msg_prev = msg('off')                                                    
       "alloc file("ddnm") unit(vio) new delete tracks space(50,500)",          
       " reuse lrecl(132) recfm(f b) blksize(8976)"                             
       alloc_rc = rc                                                            
       if alloc_rc <> 0 then do                                                 
          say rexxname "could not allocate the visualization file."             
          say "We exit with code 16."                                           
          say "alloc rc = "alloc_rc                                             
          zispfrc = 16                                                          
          address ispexec 'vput zispfrc'                                        
          exit zispfrc                                                          
       end /* if alloc_rc <> 0                                                */
       msg_off  = msg(msg_prev)                                                 
       /* End of allocate visualization file.                                 */
                                                                                
       /* Write on visualization file.                                        */
       "execio" line.0  "diskw" ddnm "(stem line. finis"                        
       execio_rc = rc                                                           
       if execio_rc <> 0 then do                                                
          say rexxname "could not write on visualization file."                 
          say "We exit with code 16."                                           
          say "execio rc = "execio_rc                                           
          zispfrc = 16                                                          
          address ispexec 'vput zispfrc'                                        
          exit zispfrc                                                          
       end /* if execio_rc <> 0                                               */
       /* End of write on visualization file.                                 */
                                                                                
       /* Visualize.                                                          */
       address ispexec                                                          
         "control errors return"                                                
         "lminit dataid(list) ddname("ddnm")"                                   
         "view   dataid("list")"                                                
         "lmfree dataid("list")"                                                
       address /* resume previous environment                                 */
       /* End of visualize.                                                   */
                                                                                
       /* Clean up.                                                           */
       msg_prev = msg('off')                                                    
          "free fi("ddnm")"                                                     
       msg_off  = msg(msg_prev)     /* reset                                  */
       /* End of clean up.                                                    */
                                                                                
    end /* ispf ACTIVE                                                        */
 end /* if line.0 > 0                                                         */
                                                                                
zispfrc = 0                                                                     
if sysvar(sysispf) = 'ACTIVE' then                                              
   address ispexec 'vput zispfrc'                                               
exit zispfrc                                                                    
 /*___________________________________________________________________________*/
