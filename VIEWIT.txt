/* rexx           '/' in column 1 if run as a z/OS Unix rexx  */                
 trace o                                                                        
                                                                                
 /*___________________________________________________________*/                
 /*                                                           */                
 /* Help starts                                               */                
 /* Visualize rexx output in a file if ISPF active.           */                
 /* Examples: Used as a rexx:                                 */                
 /*                                                           */                
 /*               Command ===> TSO VIEWIT RLIST GCICSTRN *    */                
 /*               Command ===> TSO VIEWIT LU                  */                
 /*               Command ===> tso viewit help lu             */                
 /*                                                           */                
 /* Visualize clist or rexx output                            */                
 /*               Command ===> TSO VIEWIT EX 'DSNAME(CLIST1)' */                
 /*                                                           */                
 /*           Used as an edit macro:                          */                
 /*                                                           */                
 /*             Execute present rexx (rexx being edited)      */                
 /*             without parameters:                           */                
 /*               Command ===> viewit                         */                
 /*                                                           */                
 /*             Execute last saved rexx without parameters:   */                
 /*               Command ===> viewit *                       */                
 /*                                                           */                
 /*             Execute present rexx with parameters:         */                
 /*               Command ===> viewit parm1 parm2             */                
 /*                                                           */                
 /*             Execute last saved rexx with parameters:      */                
 /*               Command ===> viewit * parm1 parm2           */                
 /*                                                           */                
 /*           Used in a member list:                          */                
 /*                                                           */                
 /*                     EDIT      BOZO.TEST                   */                
 /*             Command ===>                                  */                
 /*                        Name     Prompt                    */                
 /*             viewit___ REXX01   PARM1                      */                
 /*                                                           */                
 /*           Under z/OS Unix (rexx in SYSPROC or SYSEXEC     */                
 /*           concatenation, vsualization with ISPF VIEW):    */                
 /*             Command ===> tso omvs                         */                
 /*             $ tso viewit time                             */                
 /*             $ exit                                        */                
 /*___________________________________________________________*/                
 /* In z/OS Unix, to run as as z/OS Unix rexx.                */                
 /* Visualize shell or rexx output in a temporary z/OS Unix   */                
 /* file.                                                     */                
 /* rexx viewit should be placed in a $PATH file.             */                
 /* Examples:                                                 */                
 /*                                                           */                
 /*               Command ===> tso omvs                       */                
 /*               $ viewit cal 2019                           */                
 /*               $ viewit shell01.sh arg1 arg2               */                
 /*               $ viewit rexx01.rex arg1 arg2               */                
 /*               $ viewit cat test.txt                       */                
 /*               $ cat test.txt ! viewit                     */                
 /*               $ history 0 ! viewit                        */                
 /*               $ exit                                      */                
 /*___________________________________________________________*/                
 /* Help ends                                                 */                
 /*                                                           */                
 parse source var                                                               
 rexxname = word(var,3)                                                         
 call is_help_needed(arg(1))                                                    
                                                                                
 /* Visualize rexx output.                                    */                
 /*                                                           */                
 if word(var,8) = 'OMVS' then do /* executed from z/OS Unix   */                
                                                                                
    tempx = 'temp'random(1,99999)                                               
    /* If arg(1) not blank or empty,                          */                
    /*    execute argument redirecting standard output        */                
    /*    and standard error to tempx.                        */                
    /* else visualize standard output from previous command   */                
    /*    as in:  cat abc.txt ! viewit                        */                
                                                                                
    /* Example:                                               */                
    /* viewit cat test.txt   <-- arg(1) = 'cat test.txt'      */                
                                                                                
    if strip(arg(1)) <> '' then do                                              
    /* ' ' at beginning to avoid IRX0031I */                                    
    ' 'arg(1)' > 'tempx' 2>&1'                                                  
    /*                   2>&1'    STDERR redirected to STDOUT */                
    /* ' 'arg(1)' > 'tempx              Ok                    */                
    /* address sh arg(1) '> 'tempx      works as well         */                
    end /* if strip(arg(1)) <> ''                             */                
                                                                                
    /* Example:                                               */                
    /* cat test.txt ! viewit  <-- arg(1) empty                */                
                                                                                
    else 'cp /dev/fd/0 'tempx  /* copy to regular file        */                
    /* /dev/fd/0 after pipe is standard output /dev/fd/1      */                
    /* from previous command.                                 */                
    /* /dev/fd0                         works as well         */                
                                                                                
    'oedit 'tempx         /* Open MVS Edit                    */                
    'rm    'tempx         /* remove temp file                 */                
    return                                                                      
 end /* if word(var,8) = 'OMVS'      executed from z/OS Unix  */                
 /*___________________________________________________________*/                
 /*                                                           */                
 address isredit /* Am I an edit macro?                       */                
 "macro (parm)" /* no underline in_between parents            */                
 isr_rc = rc                                                                    
                                                                                
 /* Obtain command to execute.                                */                
 if isr_rc = 0 then do /* edit macro                          */                
                                                                                
  "(dsn0) = dataset"                                                            
  /* By default (no word '*' in parm) execute what is being viewed or   */      
  /* edited.                                                            */      
  /* If there is a word '*' in parm (which will be removed), execute    */      
  /* last saved version.                                                */      
  wp = wordpos('*',parm)   /* Is word '*' in parm (wp > 0)?             */      
  if wp > 0 then do /* execute saved file, '*' present in parm          */      
     parm = delword(parm,wp,1) /* remove '*' from parm                  */      
    "(mbr)  = member"                                                           
    mbr = strip(mbr) /* '' when no member                               */      
    if mbr <> '' then dsn = dsn0'('mbr')'                                       
                 else dsn = dsn0 /* sequential                          */      
                                                                                
    /* say "dsn = "dsn                                                  */      
    /*                                                                          
    if left(dsn,1) = '/' then do                                                
       address sh                                                               
       dsn" "parm                                                               
       exit                                                                     
    end /* if left(dsn,1) = '/'                                         */      
    */                                                                          
                                                                                
    command = "exec '"dsn"' '"parm"'"                                           
                                                                                
  end /* if wp > 0     execute saved file, '*' present in parm          */      
                                                                                
  else do           /* execute copy,         no '*' in parm             */      
     /* Copy present version, possibly unsaved, to dsn_copy.            */      
     /* Execute dsn_copy.                                               */      
     /* Delete dsn_copy.                                                */      
     call set_up_prefix /* create prefix for new file                   */      
     dsn_copy = prefix'.temp.t'!!right(random(1,99999),5,'0')                   
     address tso, /* create file dsn_copy                               */      
       "alloc da('"dsn_copy"') like('"dsn0"')",                                 
       "dsorg(ps) tracks space(1,1)",                                           
       "new catalog" /* dsn_copy needs to be cataloged for exec         */      
     "repl '"dsn_copy"' .zf .zl" /* copy to temporary file              */      
                                                                                
     command = "exec '"dsn_copy"' '"parm"'"                                     
                                                                                
  end /* if wp = 0     execute copy,         no '*' in parm             */      
                                                                                
 end /* isr_rc = 0                                            */                
 else parse arg command /* rexx                               */                
 /* End of obtain command to execute.                         */                
                                                                                
 /* Execute command.                                          */                
 address tso                                                                    
 stem_name = outtrap('line.') /* stem to get display output   */                
                                                                                
 /* If first word of command begins by a valid dsname         */                
 /*    or dsname(member) (e.g. viewit used in a member list), */                
 /*    then, assume it is a rexx and execute it with          */                
 /*    parameters in single quote.                            */                
 /* else execute 'command'.                                   */                
                                                                                
 w1 = word(command,1)           /* first word                 */                
 upper w1                       /* upper case                 */                
 w1 = strip(w1,,"'")            /* remove quotes if any       */                
                                                                                
 if sysdsn("'"w1"'") = 'OK' then do /* command begins by dsn  */                
    this_exec      = word(command,1)                                            
    this_exec_parm = subword(command,2)                                         
    'exec 'this_exec "'"this_exec_parm"'"   /* execute        */                
 end /* command begins by a valid dsname or dsname(member)    */                
 else   command                             /* execute        */                
                                                                                
 outtrap_off = outtrap('off')                                                   
 /* End of execute command.                                   */                
                                                                                
 if isr_rc = 0                              &,      /* edit macro      */       
    pos('.TEMP.T',translate(dsn_copy)) > 0  then do /* check dsn_copy  */       
      msg_prev = msg('off')                                                     
        address tso "del '"dsn_copy"'"              /* delete          */       
      msg_off  = msg(msg_prev)                                                  
      drop dsn_copy                                                             
    end                                                                         
                                                                                
 call visualize                                                                 
                                                                                
 zispfrc = 0                                                                    
 if sysvar(sysispf) = 'ACTIVE' then                                             
    address ispexec 'vput zispfrc'                                              
 exit zispfrc                                                                   
 /*___________________________________________________________*/                
                                                                                
 visualize: procedure expose line. rexxname                                     
 /* Visualize.                                                */                
 if line.0 > 0 then do                                                          
    if sysvar(sysispf) <> 'ACTIVE' then do                                      
       do i = 1 to line.0                                                       
          say line.i                                                            
       end /* do i = 1 to line.0                              */                
       zispfrc = 0                                                              
       exit zispfrc                                                             
    end /* if sysvar(sysispf) <> 'ACTIVE'                     */                
    else do /*       ispf ACTIVE                              */                
                                                                                
       /* Allocate visualization file.                        */                
       address tso                                                              
       ran  = right(random(1,99999),5,'0')                                      
       ddnm = 'dd'ran                          /* choose random ddname */       
       call set_up_prefix /* create prefix for new file                */       
       dsnprint = prefix"."rexxname".R"ran                                      
       msg_prev = msg('off')                                                    
       "alloc file("ddnm") da('"dsnprint"') new catalog",                       
       "tracks space(50,500) reuse lrecl(132) recfm(f b) blksize(0)"            
       alloc_rc = rc                                                            
       if alloc_rc <> 0 then do                                                 
          say rexxname "could not allocate the visualization file."             
          say "We exit with code 16."                                           
          say "alloc rc = "alloc_rc                                             
          zispfrc = 16                                                          
          address ispexec 'vput zispfrc'                                        
          exit zispfrc                                                          
       end /* if alloc_rc <> 0                                */                
       msg_off  = msg(msg_prev)                                                 
       /* End of allocate visualization file.                 */                
                                                                                
       /* Write on visualization file.                        */                
       "execio" line.0  "diskw" ddnm "(stem line. finis"                        
       execio_rc = rc                                                           
       if execio_rc <> 0 then do                                                
          say rexxname "could not write on visualization file."                 
          say "We exit with code 16."                                           
          say "execio rc = "execio_rc                                           
          zispfrc = 16                                                          
          address ispexec 'vput zispfrc'                                        
          exit zispfrc                                                          
       end /* if execio_rc <> 0                               */                
       /* End of write on visualization file.                 */                
                                                                                
       /* Visualize.                                          */                
       "ispexec view dataset('"dsnprint"')"                                     
       /* End of visualize.                                   */                
                                                                                
       /* Clean up.                                           */                
       msg_prev = msg('off')                                                    
          "free fi("ddnm")"                                                     
          "del  '"dsnprint"'"                                                   
       msg_off  = msg(msg_prev)     /* reset                  */                
       /* End of clean up.                                    */                
                                                                                
    end /* ispf ACTIVE                                        */                
 end /* if line.0 > 0                                         */                
                                                                                
 return                                                                         
 /*___________________________________________________________________*/        
                                                                                
 set_up_prefix:                                                                 
                                                                                
 /* Set up new output file prefix.                                    */        
 prefix = sysvar('syspref')              /* tso profile prefix        */        
 uid    = sysvar('sysuid')               /* tso userid                */        
 if prefix = '' then prefix = uid        /* use uid if null prefix    */        
 if prefix <> '' & prefix <> uid then    /* different prefix than uid */        
    prefix = prefix'.'uid                /* use prefix.uid            */        
                                                                                
 return                                                                         
 /*___________________________________________________________________*/        
                                                                                
 is_help_needed:                                                                
  parse arg cmd                                                                 
                                                                                
  /* Good    for Command ===> tso viewit                                        
     but not for Command ===>     viewit                                        
                 where it is supposed to execute the member                     
  if length(space(arg(1))) = 0 then                                             
     signal call_show_help                                                      
  */                                                                            
                                                                                
  w1 = word(cmd,1) /* first parameter                                 */        
  if wordpos(translate(w1),'-HELP H -H ? -? /? AIDE SOS') > 0 then              
     signal call_show_help                                                      
  else return                                                                   
                                                                                
  call_show_help: /* show help and exit                               */        
     call show_help                                                             
     zispfrc = 0                                                                
     if sysvar(sysispf) = 'ACTIVE' then                                         
        address ispexec 'vput zispfrc'                                          
     exit zispfrc                                                               
 /*___________________________________________________________________*/        
                                                                                
 show_help:                                                                     
                                                                                
  say ' Help for 'rexxname':'                                                   
  /* Show help between 'Help starts' and 'Help ends'                  */        
  help = 'no'                                                                   
  line_counter = 0                                                              
  do i = 1 to sourceline()                                                      
     if pos('Help starts',sourceline(i)) > 0 then do                            
        help = "yes"                                                            
        iterate                                                                 
     end /* if pos('Help starts',sourceline(i)) > 0                   */        
     if pos('Help ends',sourceline(i)) > 0 then leave                           
     if help = 'yes' then do /* record sourceline(i)                  */        
        line_counter = line_counter + 1                                         
        line.line_counter = sourceline(i)                                       
     end /* if help = 'yes'                                           */        
  end /* do i = 1 to sourceline()                                     */        
  line.0 = line_counter                                                         
  call visualize                                                                
 return                                                                         
 /*___________________________________________________________________*/        
