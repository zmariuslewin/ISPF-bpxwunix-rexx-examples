 /* rexx */                                                                     
 trace o                                                                        
                                                                                
 dsnprint_prefix = ""        /* please change dataset high level qualifiers */  
                             /* for instance: dsnprint_prefix = "XX.YYYY"   */  
                                                                                
 lc_all = "En_US.IBM-1140"        /* locale                                */   
 /* lc_all = "Fr_FR.IBM-1147" */                                                
 /* Google search with:  "Compiled locales" inurl:IBM                      */   
 /*       En_US.IBM-1140 IBM-1140 is default COBOL codepage                */   
 /*       Unix USA  DE   NO   SW   IT   SP   UK   FR   INTL IS             */   
 /*       1047 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149           */   
                                                                                
 parse source . . rexxname . /* rexxname in upper case                     */   
 /*  Help starts                                                           */   
 /*________________________________________________________________________*/   
 /*                                                                        */   
 /*  rexx and macro edit.                                                  */   
 /*  Executes BPXWUNIX.                                                    */   
                                                                                
 /*  If used as an edit macro,                                             */   
 /*     1) all the parameters constitute the Unix command, and             */   
 /*     2) the edited member or file is used as STDIN.                     */   
                                                                                
 /*  If used as a rexx,                                                    */   
 /*  if the last parameter is a valid dsn or dsn(mbr) then                 */   
 /*     1) the last parameter is used for STDIN and                        */   
 /*     2) only the previous parameters constitute the Unix command.       */   
 /*  otherwise all parameters constitute the Unix command.                 */   
                                                                                
 /*  Thus, in View, edit macro unix invokation:                            */   
 /*  Command ===> unix grep -E 'ab.c'                                      */   
 /*  will obtain the dsname and member name and have bpxwunix              */   
 /*  execute with command                                                  */   
 /*  grep -E 'ab.c'                                                        */   
 /*  and dsname(member) as standard input.                                 */   
 /*  Command ===> unix cal                                                 */   
                                                                                
 /* Examples of rexx use:                                                  */   
 /* Command ===> cmde      to preserve lower case options and regex        */   
 /* Enter TSO commands below:                                              */   
 /* ===> unix cal                                                          */   
 /* ===> unix grep -E  'ar *gç(!upp¬ef|' userid.TEST(grep05)               */   
 /* ===> viewit unix grep -E  'ar *gç(!upp¬ef|' userid.TEST(grep05)        */   
 /* ===> viewit forallm unix grep -E  'ar *gç(!upp¬ef|' userid.TEST(*)     */   
 /*  viewit forallm unix grep -E -n 'cmd' noview userid.TEST(*)            */   
 /*  viewit foralld forallm unix grep -E -n 'cmd' noview userid.T*S%(*)    */   
 /* Remark:                                                                */   
 /* Command ===> epdf /    then   man grep for choice of options.          */   
                                                                                
 /* Example of batch use:                                                  */   
 /*                                                                        */   
 /*  //TSOSH    EXEC PGM=IKJEFT1B                                          */   
 /*  //SYSTSPRT DD SYSOUT=*                                                */   
 /*  //SYSTSIN  DD *                                                       */   
 /*  unix cd /tmp; dd:tsosh arg1 arg2                                      */   
 /*  //* dd:tsoh replaced by a temporary file in /tmp, thereafter removed  */*/ 
 /*  //SYSEXEC  DD DISP=SHR,DSN=XXXXXX.TEST  Contains UNIX rexx            */   
 /*  //TSOSH    DD *,DLM=EOF                                               */   
 /*  /*    rexx  Needed: / in column 1 and * in column 2 on first line */  */   
 /*  /*                  rexx is first word in comment on first line.  */  */   
 /*   trace r                                                              */   
 /*   parse arg therest                                                    */   
 /*   say "therest = "therest                                              */   
 /*   say "abc"                                                            */   
 /*   'cal' /* implicit address sh under z/OS Unix */                      */   
 /*   exit                                                                 */   
 /*  EOF                                                                   */   
 /*________________________________________________________________________*/   
 /*  Help ends                                                             */   
 /*                                                                        */   
 /* Extract Unix command and dsn.                                          */   
                                                                                
 address isredit /* Am I an edit macro?                                    */   
 "macro (cmd)"   /* cmd in mixed case                                      */   
 isr_rc = rc                                                                    
                                                                                
 if isr_rc = 0 then do /* edit macro                                       */   
    call is_help_needed                                                         
    "(dsn0) = dataset"                                                          
    "(mbr)  = member"                                                           
    if mbr <> '' then dsn = dsn0'('mbr')'                                       
                 else dsn = dsn0 /* sequential                             */   
    address            /* resume previous environment                      */   
 end /* isr_rc = 0        edit macro                                       */   
                                                                                
 else do               /* rexx, arg(1) contains dsn(mbr) at end            */   
                                                                                
    cmd   = arg(1)                        /* all parameters                */   
    call is_help_needed                                                         
                                                                                
    w     = words(arg(1))                 /* number of parameters          */   
    cmd   = subword(arg(1),1,w-1)         /* all but last parameter        */   
    dsn   = word(arg(1),w)                /* last parameter                */   
    upper dsn                                                                   
    dsn = strip(dsn,,"'")                 /* remove quotes if any          */   
    /* Check dsn                                                           */   
    msgs = msg("off")                                                           
       libelle = sysdsn("'"dsn"'")                                              
    msgs = msg(msgs)                                                            
    if libelle <> 'OK' then do                                                  
       dsn = ''      /* Assume last parm is not a dsname                   */   
       cmd = arg(1)  /* Command made up of all parameters                  */   
    end /* if sysdsn("'"dsn"'") <> 'OK'                                    */   
 end                   /* rexx                                             */   
                                                                                
 /* Change all 'xx:' in 'DD:' in cmd where x is lower or upper case d.     */   
 call ovall 'dd:' 'DD:' cmd                                                     
 cmd = result                                                                   
 call ovall 'dd=' 'DD:' cmd                                                     
 cmd = result                                                                   
                                                                                
 /* Change all 'DD:' in cmd into a temporary file to be removed at end     */   
 p = pos('DD:',cmd)                                                             
 do while p > 0               /* while 'DD:' present                       */   
                                                                                
    indd = word(substr(cmd,p+3),1)                                              
    address tso                                                                 
                                                                                
    /* Define executable tempfile.                                         */   
    tempfile = 'temp-'date('s')'-'space(translate(time(),'',':'),0)             
    tempfile = "/tmp/"userid()"-"tempfile   /* full path                   */   
    "alloc fi(outdd) path('"tempfile"')",                                       
           "pathmode(sirwxu,sixgrp,sirgrp) pathopts(ocreat, owronly) reu"       
    allocrc = rc                                                                
    if allocrc <> 0 then do                                                     
       say "Alloc tempfile = "tempfile" return code is: "allocrc".",            
           "Do not process."                                                    
       zispfrc = 16                                                             
       signal fin                                                               
    end /* if allocrc <> 0                                                 */   
    /* relfile is relative file of tempfile in /tmp                        */   
    relfile = substr(tempfile,pos('/',tempfile,2)+1) /* after second '/'   */   
                                                                                
    "ocopy indd("indd") outdd(outdd)"  /* text default                     */   
    ocopyrc = rc                                                                
    if ocopyrc <> 0 then do                                                     
       say "ocopy return code is: "ocopyrc".",                                  
           "Do not process."                                                    
       zispfrc = 16                                                             
       signal fin                                                               
    end /* if ocopyrc <> 0                                                 */   
    address                                                                     
                                                                                
    /* Replace 'DD:' by tempfile, remove tempfile at end.                  */   
    parse var cmd head 'DD:' tail                                               
    tail = ' 'subword(tail,2)        /* past ddname                        */   
    cmd = head!!relfile!!tail'; rm 'relfile                                     
                                                                                
    p = pos('DD:',cmd)                                                          
 end /* do while p > 0                                                     */   
                                                                                
 if dsn <> '' then say dsn" is processed."                                      
                                                                                
 say                                                                            
 /* End of extract Unix command and dsn.                                   */   
 /*________________________________________________________________________*/   
 /*                                                                        */   
 /* Execute command with bpxwunix                                          */   
                                                                                
 address tso                                                                    
                                                                                
 drop stderr. env.                                                              
 stderr.0 = 0                                                                   
                                                                                
 /* z/OS Unix commands in IBM-1147 French codepage                         */   
 /* Cf. z/OS XL C/C++ Programming Guide >                                  */   
 /*     Locales supplied with z/OS XL C/C++ >                              */   
 /*     Compiled locales                                                   */   
 env.1 = "LC_ALL="lc_all                                                        
 /* env.1 = "LC_ALL=Fr_FR.IBM-1147"         locale gives LANG=C            */   
 /* env.1 = "LANG=Fr_FR.IBM-1147"           works as well                  */   
 env.2 = "PATH=/bin:.:/usr/local/bin:/tmp"                                      
 env.0 = 2                                                                      
                                                                                
 /* Second parameter is standard input.                                    */   
 if dsn <> '' then do                                                           
    "alloc fi(STDIN) da('"dsn"') shr reu"                                       
    allocrc = rc                                                                
    if allocrc <> 0 then do                                                     
       say "Alloc STDIN dsn = "dsn" return code is: "allocrc".",                
           "Do not process."                                                    
       zispfrc = 16                                                             
       signal fin                                                               
    end /* if allocrc <> 0                                                 */   
 end /* if dsn <> ''                                                       */   
                                                                                
 /* Third  parameter is standard output.                                   */   
                                                                                
 view = "yes"                         /* Default                           */   
                                                                                
 i = wordpos('NOVIEW',translate(cmd))            /* Check for 'noview'     */   
 if i > 0 then do /* If noview present                                     */   
          view = 'no'                                                           
          cmd = strip(delword(cmd,i))                                           
 end                                                                            
                                                                                
 i = wordpos('VIEW',translate(cmd))              /* Check for 'view'       */   
 if i > 0 then do /* If view present                                       */   
          view = 'yes'                                                          
          cmd = strip(delword(cmd,i))                                           
 end                                                                            
                                                                                
 if sysvar(sysenv)  = 'BACK'       then view = "no"                             
 if sysvar(sysispf) = 'NOT ACTIVE' then view = "no"                             
 say "Command: "cmd                                                             
                                                                                
 if view = 'yes' then call alloc_dsnprint                                       
                                                                                
 select /* according to (view = 'yes' or 'no') and (dsn = '' or dsn <> '') */   
   when view = 'no'  & dsn <> '' then                                           
        bpxwunix_rc = bpxwunix(cmd,'DD:STDIN',stdout.,stderr.,env.)             
   when view = 'yes' & dsn <> '' then                                           
        bpxwunix_rc = bpxwunix(cmd,'DD:STDIN','DD:STDOUT',stderr.,env.)         
   when view = 'no'  & dsn =  '' then                                           
        bpxwunix_rc = bpxwunix(cmd,,stdout.,stderr.,env.)                       
   when view = 'yes' & dsn =  '' then                                           
        bpxwunix_rc = bpxwunix(cmd,,'DD:STDOUT',stderr.,env.)                   
   otherwise nop                                                                
 end    /* select according to view and (dsn = '' or dsn <> '')            */   
                                                                                
 /* We use say for rexx output as say may be out trapped.                  */   
 if dsn <> '' then 'free fi(STDIN)'                                             
 /*                                                                             
 if bpxwunix_rc <> 0 ! stderr.0 <> 0 then do                                    
                                                                                
    say 'bpxwunix_rc = 'bpxwunix_rc                                             
    say 'stderr.0    = 'stderr.0                                                
 end /* if bpxwunix_rc <> 0 ! stderr.0 <> 0                                */   
 */                                                                             
 /*________________________________________________________________________*/   
 /*                                                                        */   
 /* Process result                                                         */   
                                                                                
 /* Display stderr.                                                        */   
 if datatype(stderr.0) = 'NUM' & stderr.0 <> 0 then do                          
    say 'dsn         = 'dsn                                                     
    say 'cmd         = 'cmd                                                     
    say 'bpxwunix_rc = 'bpxwunix_rc                                             
    do i = 1 to stderr.0                                                        
       say 'stderr.'i' ='stderr.i                                               
    end                                                                         
 end /* if datatype(stderr.0) = 'NUM'                                      */   
                                                                                
 /* Display stdout.                                                        */   
 if datatype(stdout.0) = 'NUM' & stdout.0 <> 0 then do                          
    /* say */                                                                   
       do i = 1 to stdout.0                                                     
          say stdout.i                                                          
       end                                                                      
 end /* if datatype(stdout.0) = 'NUM'                                      */   
                                                                                
 if view = 'yes' then call view_dsnprint                                        
                                                                                
 /* Return code thru ISPF.                                                 */   
 if bpxwunix_rc = 255 then bpxwunix_rc = 0 /* 255: terminated              */   
 if bpxwunix_rc = 0 & stderr.0 = 0          then zispfrc =  0                   
                                            else zispfrc = 16                   
 fin:                                                                           
   /*                                                                           
   if zispfrc > 0 then do                                                       
      say 'return code = 'zispfrc                                               
      say                                                                       
   end /* if zispfrc > 0                                                   */   
   */                                                                           
   if sysvar(sysispf) = 'ACTIVE' then address ispexec "vput zispfrc"            
   exit zispfrc                                                                 
 /*                                                                        */   
 /* End of process result                                                  */   
 /*________________________________________________________________________*/   
                                                                                
 alloc_dsnprint:                                                                
 /* Allocate STDOUT dsnprint dataset.                                      */   
 time_stamp = t!!time('s')                                                      
 if dsnprint_prefix = '' then                                                   
    dsnprint = userid()"."rexxname"."time_stamp                                 
 else dsnprint = dsnprint_prefix"."userid()"."rexxname"."time_stamp             
 allo = "allocate fi(stdout) da('"dsnprint"') reuse",                           
 "new catalog",                                                                 
 "dsorg(ps) blksize(0)",                                                        
 "space(1 15) tracks"                                                           
 allo_large = " recfm(v b) lrecl(32756)"                                        
 if isr_rc = 0 then do /* edit macro                                       */   
    allo = allo !! " like('"dsn0"')"                                            
    if pos('large output',cmd) > 0 then allo = allo !! allo_large               
 end /* if isr_rc = 0     edit macro                                       */   
 else do /* rexx                                                           */   
    if pos('large output',cmd) > 0 then allo = allo !! allo_large               
       else allo = allo !! " recfm(f b) lrecl(133)"                             
 end /* rexx                                                               */   
                                                                                
 allo                           /* execute                                 */   
 arc = rc                                                                       
 if arc > 0 then do                                                             
    say "STDOUT DSNPRINT allocate gave code "arc                                
    exit(12)                                                                    
 end /* if arc > 0                                                         */   
                                                                                
 /* Remove 'large output' from cmd if present.                             */   
 pos_lo = pos('large output',cmd)                                               
 if pos_lo > 0 then do /* remove 'large output'                            */   
    length_lo = length('large output')                                          
    /* delete starting at pos_lo for length_lo characters                  */   
    cmd = delstr(cmd,pos_lo,length_lo)                                          
    cmd = strip(cmd)                                                            
 end /* if pos_lo > 0                                                      */   
                                                                                
 return                                                                         
                                                                                
 /*________________________________________________________________________*/   
 view_dsnprint:                                                                 
                                                                                
 /*________________________________________________________________________*/   
 /* Display DSNPRINT if not empty                                          */   
   address ispexec                                                              
    "dsinfo dataset('"dsnprint"')"                                              
    /* zdstotu is used space units 13 characters                           */   
    if zdstotu <> 0 then do /* not empty                                   */   
       "lminit dataid(dd1) dataset('"dsnprint"') enq(shr)"                      
       "view   dataid("dd1")"                                                   
       "lmfree dataid("dd1")"                                                   
    end /* if zdstotu <> 0     not empty                                   */   
   address                                                                      
                                                                                
 /*________________________________________________________________________*/   
 /* Clean up                                                               */   
 msgs = msg("off")                                                              
  "free fi(stdout)"                                                             
  "delete '"dsnprint"'"                                                         
 msgs = msg(msgs)                                                               
                                                                                
 return                                                                         
 /*________________________________________________________________________*/   
 ovall: procedure                                                               
                                                                                
 /* Replace all occurences of translate(a) in translate(c) by b            */   
 /* (only the characters of string a are replaced).                        */   
 parse arg a b c                                                                
 p = pos(translate(a),translate(c))                                             
 do while p > 0               /* while a present                           */   
    /* overlay c at p by b for no more than length of a characters         */   
    c = overlay(b,c,p,length(a))                                                
    p = pos(translate(a),translate(c),p+length(a)) /* third parm is start  */   
 end /* do while p > 0                                                     */   
 return c                                                                       
 /*________________________________________________________________________*/   
 is_help_needed:                                                                
                                                                                
  w = words(cmd)                                                                
  if w = 0 then do /* at least one parameter: unix cmd                     */   
     say ' 'rexxname': At least one parameter is needed.'                       
     call show_help                                                             
     zispfrc = 8                                                                
     signal fin                                                                 
  end /* if w = 0     at least one parameter                               */   
  w1 = word(cmd,1) /* first parameter                                      */   
                                                                                
  if wordpos(translate(w1),'H HELP -H -HELP ? -? /? AIDE SOS') > 0 then do      
     call show_help                                                             
     zispfrc = 0                                                                
     signal fin                                                                 
  end /* if wordpos(translate(w1),'...') > 0                               */   
                                                                                
 return                                                                         
 /*________________________________________________________________________*/   
 show_help: procedure expose rexxname                                           
                                                                                
  say ' Help for 'rexxname':'                                                   
  /* Show help between 'Help starts' and 'Help ends'                       */   
  help = 'no'                                                                   
  do i = 1 to sourceline()                                                      
     if pos('Help starts',sourceline(i)) > 0 then do                            
        help = "yes"                                                            
        iterate                                                                 
     end /* if pos('Help starts',sourceline(i)) > 0                        */   
     if pos('Help ends',sourceline(i)) > 0 then leave                           
     if help = 'yes' then say sourceline(i)                                     
  end /* do i = 1 to sourceline()                                          */   
 return                                                                         
 /*________________________________________________________________________*/   
