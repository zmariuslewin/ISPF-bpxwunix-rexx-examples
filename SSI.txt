/* rexx */                                                                      
trace o                                                                         
parse source . . rexxname .                                                     
                                                                                
/*____________________________________________________________________________*/
/*                                                                            */
/*  Help starts                                                               */
/*                                                                            */
/* Set SSI eight hexadecimal digit constant to                                */
/* a load module/program object.                                              */
/* Rebind the load module/program object setting the SSI.                     */
/*                                                                            */
/* ssi      optional parameter, may be obtained from prompt field             */
/* ssi      Eight hexadecimal characters: 0123456789ABCDEF                    */
/* ssi default:   2 hex char followed by yymmdd                               */
/*                                                                            */
/* Example:                                                                   */
/*  Command ===> tso ssi 'BOZO.LOAD(COBOL01)' AA190206                        */
/*                                                                            */
/* Example:                                                                   */
/* XXXX    VIEW      BOZO.LOAD                                                */
/*  Command ===>                                                  Scroll ===> */
/*            Name     Prompt   Alias-of    ---- Attributes ----      SSI     */
/* ssi______ COBOL01   AA123456                     RN RU                     */
/* ssi______ COBOL02                                RN RU                     */
/*                                                                            */
/* Result:                                                                    */
/* XXXX    VIEW      BOZO.LOAD                                                */
/*  Command ===>                                                  Scroll ===> */
/*            Name     Prompt   Alias-of    ---- Attributes ----      SSI     */
/* _________ COBOL01                                RN RU         AA123456    */
/* _________ COBOL02                                RN RU         FF190506    */
/*____________________________________________________________________________*/
/* Help ends                                                                  */
/*                                                                            */
                                                                                
/*__________________________________________________________*/                  
/* Get parameters                                           */                  
                                                                                
parse arg dsn ssi .                                                             
                                                                                
dsn = strip(dsn,,"'") /* remove quotes if any               */                  
parse var dsn dsn '(' member ')'                                                
if member = '' then do                                                          
   say 'Load module/program object missing.'                                    
   call show_help                                                               
   exit                                                                         
end /* if member = ''                                       */                  
                                                                                
if ssi = '' then ssi = 'FF'substr(date('s'),3) /* FFyymmdd  */                  
                                                                                
if length(ssi) <> 8 then do                                                     
   say ssi 'must be an hex string eight characters long',                       
           "such as '019ABCEF'."                                                
   call show_help                                                               
   exit                                                                         
end /* if length(ssi) <> 8                                  */                  
                                                                                
if verify(ssi,'0123456789ABCDEF') > 0 then do                                   
   say ssi 'not an hex string.'                                                 
   call show_help                                                               
   exit                                                                         
end /* if not hex string                                    */                  
                                                                                
/*__________________________________________________________*/                  
/* Allocate SYSLIB      <-- input                           */                  
"alloc fi(syslib) da('"dsn"') shr reu"                                          
   alloc_syslib_rc = rc                                                         
   call check_rc alloc_syslib_rc,0,'alloc fi(syslib)'                           
                                                                                
/* Allocate SYSLMOD     <-- output                          */                  
"alloc fi(syslmod) da('"dsn"') shr reu"                                         
   alloc_syslmod_rc = rc                                                        
   call check_rc alloc_syslmod_rc,0,'alloc fi(syslmod)'                         
                                                                                
/* Allocate SYSPRINT                                        */                  
"alloc fi(sysprint) dummy reu" /* da(*) instead of dummy    */                  
   alloc_sysprint_rc = rc                                                       
   call check_rc alloc_sysprint_rc,0,'alloc fi(sysprint)'                       
                                                                                
/* Allocate SYSUT1                                          */                  
"alloc fi(sysut1) unit(vio) cyl space(2 2) reu"                                 
   alloc_sysut1_rc = rc                                                         
   call check_rc alloc_sysut1_rc,0,'alloc fi(sysut1)'                           
                                                                                
/*__________________________________________________________*/                  
/* Allocate SYSLIN control cards dataset.                   */                  
"allocate fi(syslin) unit(vio) reu",                                            
"lrecl(80) recfm(f b) blksize(0)",                                              
"space(1 15) tracks"                                                            
   alloc_syslin_rc = rc                                                         
   call check_rc alloc_syslin_rc,0,'alloc fi(syslin)'                           
                                                                                
/*__________________________________________________________*/                  
/* Set IEWL SYSLIN control cards.                           */                  
newstack                                                                        
queue ' INCLUDE  -ATTR,-ALIASES,SYSLIB('member')'                               
/* -ATTR:   The attributes which are copied are:                    */          
/*          AC, AMODE, DC, OL, REUS, RMODE, SSI, TEST, entry point, */          
/*          DYNAM and MIGRATABLE.                                   */          
/*                                                                  */          
queue ' SETOPT   PARM(SSI='ssi')'                                               
/* SETOPT   overrides PARM and INCLUDE -ATTR                        */          
/* SETOPT   example:                                                */          
/* SETOPT   PARM(OVLY=NO,TEST=NO,OL=NO,DC=NO,EDIT,REUS=RENT,        */          
/*          SSI=01118876,AC=0,AMODE=ANY,RMODE=24,NOLONGPARM)        */          
/* Note for REUS= parameter: NONE < SERIAL < RENT < REFR            */          
/*                                                                  */          
queue ' NAME     'member'(R)'                                                   
"execio "queued()" diskw SYSLIN (fini"                                          
   SYSLIN_execio_rc = rc                                                        
   call check_rc SYSLIN_execio_rc,0,'SYSLIN execio'                             
delstack                                                                        
                                                                                
/*__________________________________________________________*/                  
/* Execute linkedit/binder.                                 */                  
                                                                                
"call *(iewl) ",                                                                
"'LIST,XREF'"                                                                   
                                                                                
/*__________________________________________________________*/                  
/* Clean up                                                 */                  
"free fi(syslib syslmod sysprint sysut1 syslin)"                                
exit                                                                            
                                                                                
 /*_________________________________________________________________________*/  
 /* Called subroutines                                                      */  
                                                                                
 check_rc:                                                                      
  /* call example:    call check_rc rc,0,'libdef isptlib'                   */  
  /* In case of error:                                                          
  ZEDMSGNO (message identifier), ZEDISMSG (short message text) and ZEDILMSG     
  */                                                                            
  if arg(1)<=arg(2) then return                        /* rc=0              */  
  if zerrmsg <> '' then address ispexec 'setmsg msg('zerrmsg')'                 
  /* ISPEXEC or ISREDIT error:                                              */  
  if ZERRSM   <> 'ZERRSM'   then say 'ZERRSM   = 'ZERRSM                        
  if ZERRLM   <> 'ZERRLM'   then say 'ZERRLM   = 'ZERRLM                        
  if ZEDMSGNO <> 'ZEDMSGNO' then say 'ZEDMSGNO = 'ZEDMSGNO                      
  if ZEDISMSG <> 'ZEDISMSG' then say 'ZEDISMSG = 'ZEDISMSG                      
  if ZEDILMSG <> 'ZEDILMSG' then say 'ZEDILMSG = 'ZEDILMSG                      
  if debug='DEBUG' then                                                         
    say 'FUNC='arg(3) 'RC='arg(1)                                               
  else say 'rc = 'arg(1)                                                        
  exit arg(1)                                                                   
                                                                                
 /*________________________________________________________________________*/   
 show_help: procedure expose rexxname                                           
                                                                                
  say ' Help for 'rexxname':'                                                   
  /* Show help between 'Help starts' and 'Help ends'                       */   
  help = 'no'                                                                   
  do i = 1 to sourceline()                                                      
     if pos('Help starts',sourceline(i)) > 0 then do                            
        help = "yes"                                                            
        iterate                                                                 
     end /* if pos('Help starts',sourceline(i)) > 0                        */   
     if pos('Help ends',sourceline(i)) > 0 then leave                           
     if help = 'yes' then say sourceline(i)                                     
  end /* do i = 1 to sourceline()                                          */   
 return                                                                         
 /*________________________________________________________________________*/   
