/* rexx */                                                                      
trace o                                                                         
/*                                                                           */ 
/*   Try to get as much information as possible, related to                  */ 
/*   codepage and charset on MVS and z/OS Unix.                              */ 
/*                                                                           */ 
/* Example of use:                                                           */ 
/* Command ===> tso codepage                                                 */ 
                                                                                
if sysvar("sysispf") = 'ACTIVE',                                                
 & sysvar("sysenv")  = 'FORE'    then do  /* ISPF foreground                 */ 
   address ispexec                                                              
   "control errors return"                                                      
                                                                                
   /* Obtain the result of command                                           */ 
   /* Command ===> environ termstat                                          */ 
   /* in a stem called termstat.                                             */ 
   x = outtrap('termstat.')                                                     
       /* cf. 'SYS1.ISP.SISPTENU(ISPCMDS)' in ISPF 3.16                      */ 
       zparm = 'termstat'                                                       
       "select pgm(ispenv) parm("zparm") scrname(settings)"                     
   x = outtrap('off')                                                           
                                                                                
   /* Extract terminal codepage and charset from stem termstat.              */ 
   /*                                                                        */ 
   /* Line following 'CHARACTER SETS'                                        */ 
   /* CHARACTER SETS                                                         */ 
   /* 001B8185 82000D1D 00000000 07000000 02B7047B 0100F103 C30136           */ 
   /* Fifth word has two halfwords: charset then codepage.                   */ 
   /*                                                                        */ 
   address tso                                                                  
   charset  = 'Unknown'                 /* initialize                        */ 
   codepage = 'Unknown'                                                         
                                                                                
   do i = 1 to termstat.0                                                       
      if pos('CHARACTER SETS',termstat.i) > 0 then do                           
                                                                                
         j = i + 1                                                              
         w = word(termstat.j,5) /* fifth word of following line              */ 
         charset_halfword  = left(w,4)                                          
         charset           = right(x2d(charset_halfword),5)      /* justify  */ 
         codepage_halfword = right(w,4)                                         
         codepage          = right(x2d(codepage_halfword),5,'0') /* 5 digits */ 
         leave                                                                  
                                                                                
      end /* if pos('CHARACTER SETS',termstat.i) > 0                         */ 
   end /* do i = 1 to termstat.0                                             */ 
                                                                                
   /* Say charset and codepage:                                              */ 
   say 'Terminal codepage from "Command ===> environ termstat"   = 'codepage    
   say 'Terminal charset  from "Command ===> environ termstat"   = 'charset     
                                                                                
   address ispexec 'vget (ztermcp5,ztermcs5) shared'                            
   say 'Terminal codepage from ispf variable ztermcp5            = 'ztermcp5    
   say 'Terminal charset  from ispf variable ztermcs5            = 'charset     
   /* ztermcp5 has 5 digits.                                                 */ 
   /* Suppress '0' at left but keep at least 3 digits. 037 is OK.            */ 
   ccsid = strip(substr(ztermcp5,1,2),'L','0')!!substr(ztermcp5,3)              
   say 'Codepage which may be used in iconv z/OS Unix command    = IBM-'ccsid   
                                                                                
   address                                                                      
end /*                                       ISPF foreground                 */ 
                                                                                
/*___________________________________________________________________________*/ 
/* Try to get COBOL codepage if COBOL compiler in linklist.                  */ 
/*                                                                           */ 
                                                                                
call try_to_get_COBOL_codepage_default                                          
                                                                                
/*___________________________________________________________________________*/ 
/* Try to get WMQ Default Queue Manager ccsid (if WMQ library in linklist).  */ 
/*                                                                           */ 
                                                                                
call try_to_get_WMQ_default_queue_manager_ccsid                                 
                                                                                
/*___________________________________________________________________________*/ 
                                                                                
/* Issue z/OS command: D UNI,CONV                                            */ 
                                                                                
cmd = 'D UNI,CONV'                                                              
call execute_MVS_command(cmd)                                                   
                                                                                
/*___________________________________________________________________________*/ 
                                                                                
/* Issue z/OS Unix commands: locale                                          */ 
/*                           locale -ck charmap codeset                      */ 
                                                                                
cmd = 'locale'                                                                  
call execute_unix_command(cmd)                                                  
                                                                                
cmd = 'locale -ck charmap codeset'                                              
call execute_unix_command(cmd)                                                  
exit                                                                            
                                                                                
/*________________________ROUTINES FOLLOW ___________________________________*/ 
                                                                                
execute_MVS_command:                                                            
parse arg cmd                                                                   
                                                                                
drop c.                                                                         
c.0 = 1                                                                         
c.1 = left(cmd,80)                                                              
                                                                                
/* Execute command.                                                          */ 
/* Result in isfulog. stem                                                   */ 
                                                                                
rc = isfcalls("on")                    /* access = on                        */ 
isfcons = "sdsf"random()               /* console = sdsfxxx                  */ 
isfdelay = 1 /* Wait 1 second before retrieving results                      */ 
address sdsf isfslash "("c.") (wait)"                                           
isfslash_rc = rc                       /* save return code                   */ 
rc = isfcalls("off")                   /* access = off                       */ 
                                                                                
/* If ok, display result.                                                    */ 
                                                                                
if isfslash_rc = 0 then do                                                      
   say                                                                          
   say 'Execution of MVS command'                                               
   say cmd                                                                      
   say 'gave:'                                                                  
   say                                                                          
   select /* format result according to command                              */ 
                                                                                
   when cmd = 'D UNI,CONV' then do                                              
   /* get i, number line and p position of first line with 'CONVERSION'      */ 
     do i = 1 to isfulog.0                                                      
        p = pos('CONVERSION',isfulog.i)                                         
        if p >  0 then leave                                                    
     end /* do i = 1 to isfulog.0                                            */ 
                                                                                
   /* say, starting from line with 'CONVERSION' and shifting left            */ 
     do k = i to isfulog.0                                                      
        say substr(isfulog.k,p)                                                 
     end /* do k = i to isfulog.0                                            */ 
   end /* when cmd = 'D UNI,CONV'                                            */ 
                                                                                
   otherwise /* general                                                      */ 
     do i = 1 to isfulog.0                                                      
        say isfulog.i                                                           
     end /* do i = 1 to isfulog.0                                            */ 
                                                                                
   end /* select    format result according to command                       */ 
end /* if isfslash_rc = 0                                                    */ 
                                                                                
return                                                                          
/*___________________________________________________________________________*/ 
                                                                                
execute_unix_command:                                                           
parse arg cmd                                                                   
                                                                                
call bpxwunix cmd,,out.                                                         
                                                                                
if datatype(out.0) = 'NUM' then do                                              
   if out.0 > 0 then do                                                         
      say                                                                       
      say 'Execution of z/OS Unix command'                                      
      say cmd                                                                   
      say 'gave:'                                                               
      say                                                                       
      do i = 1 to out.0                                                         
         say out.i                                                              
      end /* do i = 1 to out.0                                               */ 
   end /* if out.0 > 0                                                       */ 
end /* if datatype(out.0) = 'NUM'                                            */ 
                                                                                
return                                                                          
/*___________________________________________________________________________*/ 
                                                                                
try_to_get_COBOL_codepage_default:                                              
                                                                                
/* Empty COBOL program compilation                                           */ 
/* to get COBOL default codepage if compiler is in linklist.                 */ 
/* CODEPAGE is in SYSPRINT.                                                  */ 
                                                                                
address tso                                                                     
                                                                                
/* sysin  Empty COBOL program, compilation gives rc = 16                     */ 
'alloc fi(sysin) dummy reuse'                                                   
                                                                                
/* COBOL sysprint                                                            */ 
'alloc fi(sysprint) unit(vio) tr sp(1) reuse'                                   
arc = rc                                                                        
if arc > 0 then do                                                              
   say "cobol sysprint allocate gave code "arc                                  
   exit(12)                                                                     
end /* if arc > 0 */                                                            
/*                                                                           */ 
                                                                                
/* syslin                                                                    */ 
'alloc fi(syslin) dummy reuse'                                                  
                                                                                
/* sysut1 to sysut15                                                         */ 
do i = 1 to 15                                                                  
  "alloc fi(sysut"i") unit(vio) tr sp(1) reuse"                                 
  brc = rc                                                                      
  if brc > 0 then do                                                            
     say "cobol sysut"i" allocate gave code "brc                                
     exit(12)                                                                   
  end /* if brc > 0 */                                                          
end /* do i = 1 to 15                                                        */ 
                                                                                
/* sysmdeck                                                                  */ 
'alloc fi(sysmdeck) dummy reuse'                                                
                                                                                
/* Execute interactively the COBOL compiler.                                 */ 
' call *(igycrctl)'              /*   if in linklist                         */ 
                                                                                
cmd = 'grep CODEPAGE'   /* e.g.  CODEPAGE(1140)                              */ 
call bpxwunix cmd,'DD:SYSPRINT',out.                                            
if datatype(out.0) = 'NUM' then do                                              
   if out.0 > 0 then do                                                         
      parse var out.1 . '(' codepage ')' .                                      
      say                                                                       
      say 'COBOL default codepage value is ',                                   
          '                           'codepage                                 
      /* COBOL defaults in *(igycdopt)                                       */ 
   end /* if out.0 > 0                                                       */ 
end /* if datatype(out.0) = 'NUM                                             */ 
                                                                                
/* clean up                                                                  */ 
"free fi(sysprint syslin sysin sysmdeck)"                                       
do i = 1 to 15                                                                  
  "free fi(sysut"i")"                                                           
end /* do i = 1 to 15                                                        */ 
                                                                                
address                                                                         
return                                                                          
/*___________________________________________________________________________*/ 
                                                                                
try_to_get_WMQ_default_queue_manager_ccsid:                                     
                                                                                
/* Determine ccsid of (default queue manager                                 */ 
/*           for z/os batch programs in csqbdefv)                            */ 
address tso                                                                     
                                                                                
/*___________________________________________________________________________*/ 
/*  Allocate files for csqutil                                               */ 
                                                                                
"alloc fi(csqucmd) unit(vio) tracks sp(1) recfm(f) lrecl(80) reuse"             
newstack                                                                        
queue "DISPLAY QMGR QMNAME CCSID"                                               
address mvs "execio "queued()" diskw csqucmd (fini"                             
delstack                                                                        
                                                                                
"alloc fi(sysin) unit(vio) tracks sp(1) recfm(f) lrecl(80) reuse"               
newstack                                                                        
queue "COMMAND"                                                                 
address mvs "execio "queued()" diskw sysin (fini"                               
delstack                                                                        
                                                                                
"alloc fi(sysprint) unit(vio) tracks sp(1) recfm(f b a) lrecl(133) reuse"       
                                                                                
/*___________________________________________________________________________*/ 
/* Execute CSQUTIL.                                                          */ 
                                                                                
  "call *(csqutil) ",                                                           
  "' '"   /* use default Queue Manager from CSQBDEFV                         */ 
  xrc = rc                /* save csqutil return code                        */ 
                                                                                
if xrc = 0 then do                                                              
   address mvs "execio * diskr sysprint (stem csqutil. fini"                    
   do i = 1 to csqutil.0                                                        
      if pos('QMNAME(',csqutil.i) > 0 then do                                   
         parse var csqutil.i . 'QMNAME(' qmname ')' .                           
         iterate /* CCSID after                                              */ 
      end /* if pos('QMNAME(',csqutil.i) > 0                                 */ 
      if pos('CCSID(',csqutil.i) > 0  then do                                   
         parse var csqutil.i . 'CCSID('  ccsid  ')' .                           
         leave                                                                  
      end /* if pos('CCSID(',csqutil.i) > 0                                  */ 
   end /* do i = 1 to csqutil.0                                              */ 
   say                                                                          
   say "Default WMQ Queue Manager "qmname" has parameter CCSID ",               
       "        "ccsid                                                          
end /* if xrc = 0                                                            */ 
                                                                                
/* if xrc <> 0 then do nothing; library possibly not in Linklist             */ 
                                                                                
"free fi(sysin sysprint csqucmd)"                                               
drop csqutil.                                                                   
                                                                                
address                                                                         
return                                                                          
/*___________________________________________________________________________*/ 
