/* rexx */                                                                      
                                                                                
/* Display in terminal codepage                             */                  
/*  a string, given as a parameter, converted:              */                  
/*  to IBM-1047 (Unix),                                     */                  
/*  to IBM-1140 (US) if the terminal codepage is different, */                  
/*  to IBM-1208 (UTF8).                                     */                  
                                                                                
/* Default string contains pangram:                         */                  
/* THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG              */                  
                                                                                
/* Examples of use:                                         */                  
/*  1) Command ===> tso lazy                                */                  
/*     displays special characters and above pangram.       */                  
/*                                                          */                  
/*  2) Command ===> tso lazy Bonjour []{}1€                 */                  
/*     displays a temporary file containing:                */                  
/*     Command ===>                                         */                  
/*     ****** ****************************                  */                  
/*     000001 mine 1147 Bonjour []{}1€                      */                  
/*            98984FFFF4C9999A949B55F94444                  */                  
/*            49550114702651649005141F0000                  */                  
/*     -----------------------------------                  */                  
/*     000002 unix 1047 Bonjour Ý~éè1                       */                  
/*            A98A4FFFF4C9999A94ABCDF34444                  */                  
/*            459701047026516490DD001F0000                  */                  
/*     -----------------------------------                  */                  
/*     000003 US   1140 Bonjour ¬|éè1€                      */                  
/*            EE444FFFF4C9999A94BBCDF94444                  */                  
/*            420001140026516490AB001F0000                  */                  
/*     -----------------------------------                  */                  
/*     000004 utf8 1208 â?>ù?ÍÊ $)£' SbÐ                    */                  
/*            AA8F4FFFF44666677255773E8A22                  */                  
/*            43680120802FEAF520BDBD122C00                  */                  
                                                                                
trace o                                                                         
parse source var                                                                
rexxname = word(var,3)                                                          
                                                                                
call if_an_edit_macro /* then set viewed file in hex        */                  
                                                                                
/* rexx processing                                          */                  
parse arg string                                                                
                                                                                
/* for bpxwunix command codepage                            */                  
lc_all = "Fr_FR.IBM-1147"                                                       
/* lc_all = "En_US.IBM-1140"  lc_all = "Fr_FR.IBM-1147"     */                  
                                                                                
call set_env /* z/OS Unix environment variables             */                  
                                                                                
/* target ccsid's for iconv:                                */                  
us     = '1140'                                                                 
unix   = '1047'                                                                 
utf8   = 'utf8'   /* '1208' same                            */                  
                                                                                
/* ________________________________________________________ */                  
/* File stdin contains code to convert                      */                  
/*__________________________________________________________*/                  
                                                                                
stdin_lrecl = 200                                                               
"alloc fi(stdin) reuse unit(vio) tracks sp(1) recfm(f)",                        
       "lrecl("stdin_lrecl")"                                                   
newstack                                                                        
                                                                                
if string = '' then /* no parameter, we use default string  */                  
   string = "`~!@#$%^&*()-_=+[{]}\|^;:'" !! '",<.>/?£€§¨°éèùµ',                 
            'THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG',                      
            'the quick brown fox jumps over the lazy dog'                       
            /* This pangram is dated 1885                   */                  
queue left(string,stdin_lrecl)                                                  
                                                                                
address mvs "execio "queued()" diskw stdin (fini"                               
delstack                                                                        
                                                                                
/* ________________________________________________________ */                  
/* Allocate stdout with DISP=MOD                            */                  
/*__________________________________________________________*/                  
                                                                                
call allocate_stdout                                                            
                                                                                
/* ________________________________________________________ */                  
/* Convert                                                  */                  
/*__________________________________________________________*/                  
                                                                                
/* Obtain terminal codepage from ISPF variable ztermcp5.    */                  
address ispexec 'vget ztermcp5 shared'                                          
/* ztermcp5 has 5 digits.                                   */                  
/* Suppress '0' at left but keep at least 3 digits. 037 is OK. */               
ccsid = strip(substr(ztermcp5,1,2),'L','0')!!substr(ztermcp5,3)                 
                                                                                
cmd = 'cat'                /* copy in terminal codepage     */                  
cmd = cmd" | sed 's/^/mine "ccsid" /' "  /* prefix          */                  
call bpxwunix cmd,"dd:stdin","dd:stdout",stderr.,env.                           
call print_stderr /* check for errors                       */                  
                                                                                
cmd = 'iconv -f 'ccsid' -t 'unix   /* 1047    convert       */                  
cmd = cmd" | sed 's/^/unix 1047 /' "  /* prefix             */                  
call bpxwunix cmd,"dd:stdin","dd:stdout",stderr.,env.                           
call print_stderr                                                               
                                                                                
if ccsid <> us then do                                                          
   cmd = 'iconv -f 'ccsid' -t 'us  /* 1140  convert         */                  
   cmd = cmd" | sed 's/^/US   1140 /' "  /* prefix          */                  
   call bpxwunix cmd,"dd:stdin","dd:stdout",stderr.,env.                        
   call print_stderr                                                            
end /* if ccsid <> us                                       */                  
                                                                                
cmd = 'iconv -f 'ccsid' -t 'utf8   /* 1208  convert         */                  
cmd = cmd" | sed 's/^/utf8 1208 /' "     /* prefix          */                  
call bpxwunix cmd,"dd:stdin","dd:stdout",stderr.,env.                           
call print_stderr                                                               
                                                                                
/* ________________________________________________________ */                  
/* Visualize stdout and clean up                            */                  
/*__________________________________________________________*/                  
                                                                                
call visualize_stdout_and_clean_up                                              
                                                                                
exit                                                                            
                                                                                
/*__________________________________________________________*/                  
/*                                                          */                  
set_env:                                                                        
                                                                                
env.0 = 3                                                                       
env.1 = "PATH=.:/bin:usr/local/bin"                                             
env.2 = "LC_ALL="lc_all     /* for command codepage              */             
env.3 = "_BPX_SHAREAS=MUST" /* ddname friendly, e.g. cat DD:DD01 */             
                            /* cat "dd:dd01(mbr)"                */             
                                                                                
return                                                                          
/*__________________________________________________________*/                  
                                                                                
allocate_stdout: procedure expose rexxname prefix stdin_lrecl dsnout            
/* Allocate stdout with DISP=MOD                            */                  
                                                                                
ran  = right(random(1,99999),5,'0')                                             
call set_up_prefix /* create prefix for new file            */                  
dsnout   = prefix"."rexxname".R"ran                                             
msg_prev = msg('off')                                                           
stdout_lrecl = stdin_lrecl * 4                                                  
/* An UTF-8 character may have from 1 to 4 bytes.           */                  
/* UTF-8 is an extension of ASCII.                          */                  
"alloc file(stdout) da('"dsnout"') mod catalog",                                
"tracks space(5,5) reuse recfm(f b) blksize(0)",                                
"lrecl("stdout_lrecl")"                                                         
alloc_rc = rc                                                                   
if alloc_rc <> 0 then do                                                        
   say rexxname "could not allocate stdout."                                    
   say "We exit with code 16."                                                  
   say "alloc rc = "alloc_rc                                                    
   zispfrc = 16                                                                 
   address ispexec 'vput zispfrc'                                               
   exit zispfrc                                                                 
end /* if alloc_rc <> 0                                     */                  
msg_off  = msg(msg_prev)                                                        
                                                                                
return                                                                          
/* End of allocate_stdout                                   */                  
                                                                                
/*__________________________________________________________*/                  
                                                                                
 set_up_prefix:                                                                 
                                                                                
 /* Set up new output file prefix.                                    */        
 prefix = sysvar('syspref')              /* tso profile prefix        */        
 uid    = sysvar('sysuid')               /* tso userid                */        
 if prefix = '' then prefix = uid        /* use uid if null prefix    */        
 if prefix <> '' & prefix <> uid then    /* different prefix than uid */        
    prefix = prefix'.'uid                /* use prefix.uid            */        
                                                                                
 return                                                                         
/*__________________________________________________________*/                  
/*                                                          */                  
print_stderr: procedure expose stderr.                                          
                                                                                
if datatype(stderr.0) = 'NUM' then do                                           
   if stderr.0 > 0 then do                                                      
      say                                                                       
      do i = 1 to stderr.0                                                      
         say 'stderr.'i' = 'stderr.i                                            
      end /* do i = 1 to stderr.0                           */                  
   end /* if stderr.0 > 0                                   */                  
end /* if datatype(stderr.0) = 'NUM                         */                  
                                                                                
return                                                                          
/*__________________________________________________________*/                  
/*                                                          */                  
                                                                                
visualize_stdout_and_clean_up:                                                  
                                                                                
/* Visualize.                                               */                  
zedsmsg = 'PF3 Return del this file'                                            
zedlmsg = 'PF3 will return and delete this file'                                
address ispexec                                                                 
  "setmsg msg(isrz000)"                                                         
  "view dataset('"dsnout"') macro("rexxname")"                                  
  /* "view dataset('"dsnout"') macro(hex)"    also Ok       */                  
  /* Also Ok:                                                                   
  "control nondispl enter"                                                      
  parm = ";hex;res"                                                             
  "view dataset('"dsnout"') macro(nop) parm(parm)"                              
  */                                                                            
address                                                                         
/* Same rexx used as an edit macro.                         */                  
/* End of visualize.                                        */                  
                                                                                
/* Clean up.                                                */                  
msg_prev = msg('off')                                                           
   "free fi(stdin, stdout)"                                                     
   "del  '"dsnout"'"                                                            
msg_off  = msg(msg_prev)     /* reset                       */                  
/* End of clean up.                                         */                  
                                                                                
return                                                                          
/*__________________________________________________________*/                  
                                                                                
if_an_edit_macro:                                                               
/* Set viewed file in hexadecimal                           */                  
                                                                                
address isredit                                                                 
"macro"                                                                         
isr_rc = rc                                                                     
/* "macro (parm)"                                           */                  
if isr_rc = 0 then do /* edit macro                         */                  
   'hex'                                                                        
   'res'                                                                        
   exit                                                                         
end /* isr_rc = 0                                           */                  
address                                                                         
return                                                                          
/*__________________________________________________________*/                  
