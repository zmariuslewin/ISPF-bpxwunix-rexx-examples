  /* rexx */                                                                    
  trace o                                                                       
  parse arg command                                                             
  parse source . . rexxname .                                                   
  /*                                                                 */         
  /*_________________________________________________________________*/         
  /* Command contains a member pattern with at least one '*' or '%'. */         
  /* We execute the command for each member in pattern.              */         
  /* Examples:                                                       */         
  /* Command ===> tso forallm info XXXXXX.LOAD(A*)                   */         
  /* Command ===> tso viewit forallm info XXXXXX.LOAD(A*)            */         
  /* Command ===> tso viewit forallm terse info USER01.LOAD(A*)      */         
  /*                  terse applies to forallm                       */         
  /*_________________________________________________________________*/         
  /*                                                                 */         
  call terse_processing /* default terse = 'no'                      */         
                                                                                
  /* Find member pattern in command                                  */         
                                                                                
  w = words(command)                                                            
  do i=1 to w                                                                   
     mot = word(command,i)  /* i-th word                             */         
     if pos('*',mot) = 0 & pos('%',mot) = 0 then iterate                        
     if pos('(',mot) = 0                    then iterate                        
     if pos(')',mot) = 0                    then iterate                        
                                                                                
     /* At this point, there exists at least a '*' or '%'            */         
     /* in word(command,i) and there exists a '(' and a ')'.         */         
                                                                                
     /* Use last innermost parent for pattern.                       */         
     left    = lastpos('(',mot)      /* last left parent position    */         
     /* Determine first right parent at right of last left parent.   */         
     right   = pos(')',mot,left+1)                                              
     h       = substr(mot,1,left-1)  /* h: head of mot               */         
     pattern = substr(mot,left+1,right-left-1) /* innermost parent content */   
     pattern = strip(pattern)                                                   
                                                                                
     /* check pattern                                                */         
     member0 = translate(pattern,'AA','*%')  /* '*' '%' replaced by 'A' */      
     upper member0                                                              
     if checkmbr(member0) <> 0              then iterate                        
                                                                                
     t       = substr(mot,right+1)   /* t: tail of mot               */         
     /* Extract dsn between last and next to last left parent.       */         
     h0 = translate(h,'  ',"('") /* replace left parent, single quote */        
     dsn = word(h0,words(h0))    /* last word                        */         
                                                                                
     /* check dsn                                                    */         
     if sysdsn("'"dsn"'") = 'OK'            then leave /* found      */         
     /* We leave if check pattern and check dsn are OK.              */         
  end /* do i=1 to w                                                 */         
                                                                                
  /*_________________________________________________________________*/         
  if terse = 'no' then                                                          
     say 'Generic command: 'command                                             
  if i > w then do                                                              
  /* Incorrect member pattern in command (missing or with no * or %) */         
                                                                                
     say "does not contain a word with at least a '*' or '%' present"           
     say '     and a valid member pattern between parents.            '         
     parse source . . rexxname .                                                
     say 'rexx 'rexxname' exits.'                                               
     say                                                                        
     address ispexec                                                            
     'control errors return'                                                    
     zispfrc = 30                                                               
     'vput zispfrc'                                                             
     exit zispfrc                                                               
                                                                                
  end /* if i > w                                                   */          
  /*________________________________________________________________*/          
  /* We shall replace member pattern by member name                 */          
  /* for each member name included in member pattern.               */          
                                                                                
  head = subword(command,1,i-1)  /* before word with member pattern */          
  tail = subword(command,i+1)    /* after  word with member pattern */          
                                                                                
  /*________________________________________________________________*/          
                                                                                
  /*                  S T U C T U R E                                           
                                                                                
   lminit             assign a dataid                                           
      lmopen                                                                    
         lmmlist      obtain member name (loop)                                 
            process   rexx with explicit member name                            
         lmmlist option(free)                                                   
      lmclose                                                                   
   lmfree             dataid                                                    
                                                                                
  */                                                                            
                                                                                
  address ispexec                                                               
  'control errors return'                                                       
                                                                                
  "lminit dataid(data1) dataset('"dsn"')"                                       
  lminitrc = rc                                                                 
  if lminitrc <> 0 then say_error('lminit' lminitrc)                            
                                                                                
 "lmopen dataid("data1") option(input)"                                         
  lmopenrc = rc                                                                 
  if lmopenrc <> 0 then say_error('lmopen' lmopenrc)                            
                                                                                
 /* Loop through all members of library included in pattern          */         
                                                                                
 member = ' '                                                                   
 count  = 0                                                                     
 lmrc   = 0                                                                     
 do while lmrc = 0                                                              
                                                                                
   'lmmlist dataid('data1') option(list),                                       
   member(member) pattern('pattern') stats(no)'                                 
   lmrc = rc                                                                    
   if lmrc = 0 then /* process member */                                        
     do                                                                         
       count = count + 1  /* member counter                          */         
       member = strip(member) /* remove right spaces if any          */         
       if terse = 'no' then do                                                  
          say                                                                   
          say right(count,10)' Processing member' member'.'                     
       end /* if terse = 'no'                                        */         
                                                                                
       saveenv = address()    /* save environment                    */         
       address TSO                                                              
          call process /* member                                     */         
       address value saveenv  /* restore environment                 */         
                                                                                
     end /* if lmrc = 0   process member */                                     
 end /* do while lmrc = 0 */                                                    
                                                                                
 /*__________________________________________________________________*/         
 /* Clean up.                                                        */         
 /*__________________________________________________________________*/         
                                                                                
 'lmmlist dataid('data1') option(free)'                                         
  lmmlist_option_freerc = rc                                                    
  if lmmlist_option_freerc <> 0 then                                            
     say_error('lmmlist option free' lmmlist_option_freerc)                     
                                                                                
 'lmclose dataid('data1')'                                                      
  lmcloserc = rc                                                                
  if lmcloserc <> 0 then say_error('lmclose' lmcloserc)                         
                                                                                
 'lmfree dataid('data1')'                                                       
  lmfreerc = rc                                                                 
  if lmfreerc <> 0 then say_error('lmfree' lmfreerc)                            
                                                                                
 /*__________________________________________________________________*/         
 /* Normal exit.                                                     */         
 /*__________________________________________________________________*/         
                                                                                
  if terse = 'no' then do                                                       
     say                                                                        
     say 'There were 'count' members processed for 'word(command,i)'.'          
  end /* if terse = 'no'                                             */         
  zispfrc = 0                                                                   
  'vput zispfrc'                                                                
  exit zispfrc                                                                  
                                                                                
  /*_____________________________________________________________*/             
  say_error: procedure expose zerrlm                                            
    parse arg function thisrc                                                   
    say ' '                                                                     
    say function' error:'                                                       
    say function' failed with rc = 'thisrc                                      
    say         "ZERRLM  = '"strip(zerrlm)"'"                                   
    say ' '                                                                     
    zispfrc = 16                                                                
    'vput zispfrc'                                                              
    exit zispfrc                                                                
  /*_____________________________________________________________*/             
  process:                                                                      
    /*                                                                          
    say                                                                         
    say "member = "member                                                       
    say 'in process'                                                            
    */                                                                          
 /* Execute specific command.                                    */             
 /* member pattern replaced by member name                       */             
    specific_command = head' 'h'('member')'t' 'tail                             
    /*                                                                          
    say copies(' ',11)"Execution of "specific_command                           
    */                                                                          
                                                                                
    interpret 'specific_command' /* command executed here        */             
                                                                                
 /* End of execute specific command.                             */             
    return                                                                      
  /*_____________________________________________________________*/             
                                                                                
  checkmbr: procedure                                                           
  /* Check library member name syntax, return 4 if invalid.      */             
  /* member assumed to be in upper characters.                   */             
  parse arg mbr                                                                 
                                                                                
  if length(mbr) = 0  then return 4    /* null                   */             
                                                                                
  if length(mbr) > 8  then return 4    /* too long               */             
                                                                                
  leftmost = left(mbr,1)            /* alpha or national         */             
  first = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ@$#'                                       
  if pos(leftmost,first) = 0 then return 4                                      
                                                                                
  next = first'0123456789' /* alpha or national or numeric       */             
  do j = 2 to length(mbr)                                                       
     char = substr(mbr,j,1)         /* j-th character in mbr     */             
     if pos(char,next) = 0 then return 4 /* invalid mbr j-th  char */           
  end /* do j = 2 to length(mbr)                                 */             
                                                                                
  return 0                                                                      
 /*___________________________________________________________________*/        
  terse_processing: procedure expose /* in */ command  /* out */ terse          
                                                                                
  /* Processing 'TERSE' or 'QUIET' or 'SILENT' in command, if present */        
  terse = 'no'            /* Default                                  */        
                                                                                
  t = wordpos('TERSE',translate(command))                                       
  if t > 0 then do                                                              
     terse = 'yes'                                                              
     command = delword(command,t,1) /* remove 'TERSE'                 */        
  end /* if t > 0                                                     */        
                                                                                
  q = wordpos('QUIET',translate(command))                                       
  if q > 0 then do                                                              
     terse = 'yes'                                                              
     command = delword(command,q,1) /* remove 'QUIET'                 */        
  end /* if q > 0                                                     */        
                                                                                
  s = wordpos('SILENT',translate(command))                                      
  if s > 0 then do                                                              
     terse = 'yes'                                                              
     command = delword(command,s,1) /* remove 'SILENT'                */        
  end /* if s > 0                                                     */        
  return                                                                        
 /*___________________________________________________________________*/        
